/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
)

// checks if the PlanTableScanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanTableScanRequest{}

// PlanTableScanRequest struct for PlanTableScanRequest
type PlanTableScanRequest struct {
	// Identifier for the snapshot to scan in a point-in-time scan
	SnapshotId *int64 `json:"snapshot-id,omitempty"`
	// List of selected schema fields
	Select []string `json:"select,omitempty"`
	// Expression used to filter the table data
	Filter *Expression `json:"filter,omitempty"`
	// Enables case sensitive field matching for filter and select
	CaseSensitive *bool `json:"case-sensitive,omitempty"`
	// Whether to use the schema at the time the snapshot was written. When time travelling, the snapshot schema should be used (true). When scanning a branch, the table schema should be used (false).
	UseSnapshotSchema *bool `json:"use-snapshot-schema,omitempty"`
	// Starting snapshot ID for an incremental scan (exclusive)
	StartSnapshotId *int64 `json:"start-snapshot-id,omitempty"`
	// Ending snapshot ID for an incremental scan (inclusive). Required when start-snapshot-id is specified.
	EndSnapshotId *int64 `json:"end-snapshot-id,omitempty"`
	// List of fields for which the service should send column stats.
	StatsFields []string `json:"stats-fields,omitempty"`
}

// NewPlanTableScanRequest instantiates a new PlanTableScanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanTableScanRequest() *PlanTableScanRequest {
	this := PlanTableScanRequest{}
	var caseSensitive bool = true
	this.CaseSensitive = &caseSensitive
	var useSnapshotSchema bool = false
	this.UseSnapshotSchema = &useSnapshotSchema
	return &this
}

// NewPlanTableScanRequestWithDefaults instantiates a new PlanTableScanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanTableScanRequestWithDefaults() *PlanTableScanRequest {
	this := PlanTableScanRequest{}
	var caseSensitive bool = true
	this.CaseSensitive = &caseSensitive
	var useSnapshotSchema bool = false
	this.UseSnapshotSchema = &useSnapshotSchema
	return &this
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetSnapshotId() int64 {
	if o == nil || IsNil(o.SnapshotId) {
		var ret int64
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given int64 and assigns it to the SnapshotId field.
func (o *PlanTableScanRequest) SetSnapshotId(v int64) {
	o.SnapshotId = &v
}

// GetSelect returns the Select field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetSelect() []string {
	if o == nil || IsNil(o.Select) {
		var ret []string
		return ret
	}
	return o.Select
}

// GetSelectOk returns a tuple with the Select field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetSelectOk() ([]string, bool) {
	if o == nil || IsNil(o.Select) {
		return nil, false
	}
	return o.Select, true
}

// HasSelect returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasSelect() bool {
	if o != nil && !IsNil(o.Select) {
		return true
	}

	return false
}

// SetSelect gets a reference to the given []string and assigns it to the Select field.
func (o *PlanTableScanRequest) SetSelect(v []string) {
	o.Select = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetFilter() Expression {
	if o == nil || IsNil(o.Filter) {
		var ret Expression
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetFilterOk() (*Expression, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given Expression and assigns it to the Filter field.
func (o *PlanTableScanRequest) SetFilter(v Expression) {
	o.Filter = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *PlanTableScanRequest) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetUseSnapshotSchema returns the UseSnapshotSchema field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetUseSnapshotSchema() bool {
	if o == nil || IsNil(o.UseSnapshotSchema) {
		var ret bool
		return ret
	}
	return *o.UseSnapshotSchema
}

// GetUseSnapshotSchemaOk returns a tuple with the UseSnapshotSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetUseSnapshotSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSnapshotSchema) {
		return nil, false
	}
	return o.UseSnapshotSchema, true
}

// HasUseSnapshotSchema returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasUseSnapshotSchema() bool {
	if o != nil && !IsNil(o.UseSnapshotSchema) {
		return true
	}

	return false
}

// SetUseSnapshotSchema gets a reference to the given bool and assigns it to the UseSnapshotSchema field.
func (o *PlanTableScanRequest) SetUseSnapshotSchema(v bool) {
	o.UseSnapshotSchema = &v
}

// GetStartSnapshotId returns the StartSnapshotId field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetStartSnapshotId() int64 {
	if o == nil || IsNil(o.StartSnapshotId) {
		var ret int64
		return ret
	}
	return *o.StartSnapshotId
}

// GetStartSnapshotIdOk returns a tuple with the StartSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetStartSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.StartSnapshotId) {
		return nil, false
	}
	return o.StartSnapshotId, true
}

// HasStartSnapshotId returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasStartSnapshotId() bool {
	if o != nil && !IsNil(o.StartSnapshotId) {
		return true
	}

	return false
}

// SetStartSnapshotId gets a reference to the given int64 and assigns it to the StartSnapshotId field.
func (o *PlanTableScanRequest) SetStartSnapshotId(v int64) {
	o.StartSnapshotId = &v
}

// GetEndSnapshotId returns the EndSnapshotId field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetEndSnapshotId() int64 {
	if o == nil || IsNil(o.EndSnapshotId) {
		var ret int64
		return ret
	}
	return *o.EndSnapshotId
}

// GetEndSnapshotIdOk returns a tuple with the EndSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetEndSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EndSnapshotId) {
		return nil, false
	}
	return o.EndSnapshotId, true
}

// HasEndSnapshotId returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasEndSnapshotId() bool {
	if o != nil && !IsNil(o.EndSnapshotId) {
		return true
	}

	return false
}

// SetEndSnapshotId gets a reference to the given int64 and assigns it to the EndSnapshotId field.
func (o *PlanTableScanRequest) SetEndSnapshotId(v int64) {
	o.EndSnapshotId = &v
}

// GetStatsFields returns the StatsFields field value if set, zero value otherwise.
func (o *PlanTableScanRequest) GetStatsFields() []string {
	if o == nil || IsNil(o.StatsFields) {
		var ret []string
		return ret
	}
	return o.StatsFields
}

// GetStatsFieldsOk returns a tuple with the StatsFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanTableScanRequest) GetStatsFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.StatsFields) {
		return nil, false
	}
	return o.StatsFields, true
}

// HasStatsFields returns a boolean if a field has been set.
func (o *PlanTableScanRequest) HasStatsFields() bool {
	if o != nil && !IsNil(o.StatsFields) {
		return true
	}

	return false
}

// SetStatsFields gets a reference to the given []string and assigns it to the StatsFields field.
func (o *PlanTableScanRequest) SetStatsFields(v []string) {
	o.StatsFields = v
}

func (o PlanTableScanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanTableScanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot-id"] = o.SnapshotId
	}
	if !IsNil(o.Select) {
		toSerialize["select"] = o.Select
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case-sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.UseSnapshotSchema) {
		toSerialize["use-snapshot-schema"] = o.UseSnapshotSchema
	}
	if !IsNil(o.StartSnapshotId) {
		toSerialize["start-snapshot-id"] = o.StartSnapshotId
	}
	if !IsNil(o.EndSnapshotId) {
		toSerialize["end-snapshot-id"] = o.EndSnapshotId
	}
	if !IsNil(o.StatsFields) {
		toSerialize["stats-fields"] = o.StatsFields
	}
	return toSerialize, nil
}

type NullablePlanTableScanRequest struct {
	value *PlanTableScanRequest
	isSet bool
}

func (v NullablePlanTableScanRequest) Get() *PlanTableScanRequest {
	return v.value
}

func (v *NullablePlanTableScanRequest) Set(val *PlanTableScanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanTableScanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanTableScanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanTableScanRequest(val *PlanTableScanRequest) *NullablePlanTableScanRequest {
	return &NullablePlanTableScanRequest{value: val, isSet: true}
}

func (v NullablePlanTableScanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanTableScanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


