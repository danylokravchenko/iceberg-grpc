/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PositionDeleteFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionDeleteFile{}

// PositionDeleteFile struct for PositionDeleteFile
type PositionDeleteFile struct {
	ContentFile
	Content string `json:"content"`
	// Offset within the delete file of delete content
	ContentOffset *int64 `json:"content-offset,omitempty"`
	// Length, in bytes, of the delete content; required if content-offset is present
	ContentSizeInBytes *int64 `json:"content-size-in-bytes,omitempty"`
}

type _PositionDeleteFile PositionDeleteFile

// NewPositionDeleteFile instantiates a new PositionDeleteFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionDeleteFile(content string, filePath string, fileFormat FileFormat, specId int32, partition []PrimitiveTypeValue, fileSizeInBytes int64, recordCount int64) *PositionDeleteFile {
	this := PositionDeleteFile{}
	this.Content = content
	this.FilePath = filePath
	this.FileFormat = fileFormat
	this.SpecId = specId
	this.Partition = partition
	this.FileSizeInBytes = fileSizeInBytes
	this.RecordCount = recordCount
	return &this
}

// NewPositionDeleteFileWithDefaults instantiates a new PositionDeleteFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionDeleteFileWithDefaults() *PositionDeleteFile {
	this := PositionDeleteFile{}
	return &this
}

// GetContent returns the Content field value
func (o *PositionDeleteFile) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *PositionDeleteFile) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *PositionDeleteFile) SetContent(v string) {
	o.Content = v
}

// GetContentOffset returns the ContentOffset field value if set, zero value otherwise.
func (o *PositionDeleteFile) GetContentOffset() int64 {
	if o == nil || IsNil(o.ContentOffset) {
		var ret int64
		return ret
	}
	return *o.ContentOffset
}

// GetContentOffsetOk returns a tuple with the ContentOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDeleteFile) GetContentOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.ContentOffset) {
		return nil, false
	}
	return o.ContentOffset, true
}

// HasContentOffset returns a boolean if a field has been set.
func (o *PositionDeleteFile) HasContentOffset() bool {
	if o != nil && !IsNil(o.ContentOffset) {
		return true
	}

	return false
}

// SetContentOffset gets a reference to the given int64 and assigns it to the ContentOffset field.
func (o *PositionDeleteFile) SetContentOffset(v int64) {
	o.ContentOffset = &v
}

// GetContentSizeInBytes returns the ContentSizeInBytes field value if set, zero value otherwise.
func (o *PositionDeleteFile) GetContentSizeInBytes() int64 {
	if o == nil || IsNil(o.ContentSizeInBytes) {
		var ret int64
		return ret
	}
	return *o.ContentSizeInBytes
}

// GetContentSizeInBytesOk returns a tuple with the ContentSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionDeleteFile) GetContentSizeInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.ContentSizeInBytes) {
		return nil, false
	}
	return o.ContentSizeInBytes, true
}

// HasContentSizeInBytes returns a boolean if a field has been set.
func (o *PositionDeleteFile) HasContentSizeInBytes() bool {
	if o != nil && !IsNil(o.ContentSizeInBytes) {
		return true
	}

	return false
}

// SetContentSizeInBytes gets a reference to the given int64 and assigns it to the ContentSizeInBytes field.
func (o *PositionDeleteFile) SetContentSizeInBytes(v int64) {
	o.ContentSizeInBytes = &v
}

func (o PositionDeleteFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionDeleteFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedContentFile, errContentFile := json.Marshal(o.ContentFile)
	if errContentFile != nil {
		return map[string]interface{}{}, errContentFile
	}
	errContentFile = json.Unmarshal([]byte(serializedContentFile), &toSerialize)
	if errContentFile != nil {
		return map[string]interface{}{}, errContentFile
	}
	toSerialize["content"] = o.Content
	if !IsNil(o.ContentOffset) {
		toSerialize["content-offset"] = o.ContentOffset
	}
	if !IsNil(o.ContentSizeInBytes) {
		toSerialize["content-size-in-bytes"] = o.ContentSizeInBytes
	}
	return toSerialize, nil
}

func (o *PositionDeleteFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"file-path",
		"file-format",
		"spec-id",
		"partition",
		"file-size-in-bytes",
		"record-count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPositionDeleteFile := _PositionDeleteFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPositionDeleteFile)

	if err != nil {
		return err
	}

	*o = PositionDeleteFile(varPositionDeleteFile)

	return err
}

type NullablePositionDeleteFile struct {
	value *PositionDeleteFile
	isSet bool
}

func (v NullablePositionDeleteFile) Get() *PositionDeleteFile {
	return v.value
}

func (v *NullablePositionDeleteFile) Set(val *PositionDeleteFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionDeleteFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionDeleteFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionDeleteFile(val *PositionDeleteFile) *NullablePositionDeleteFile {
	return &NullablePositionDeleteFile{value: val, isSet: true}
}

func (v NullablePositionDeleteFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionDeleteFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


