/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentFile{}

// ContentFile struct for ContentFile
type ContentFile struct {
	Content string `json:"content"`
	FilePath string `json:"file-path"`
	FileFormat FileFormat `json:"file-format"`
	SpecId int32 `json:"spec-id"`
	// A list of partition field values ordered based on the fields of the partition spec specified by the `spec-id`
	Partition []PrimitiveTypeValue `json:"partition"`
	// Total file size in bytes
	FileSizeInBytes int64 `json:"file-size-in-bytes"`
	// Number of records in the file
	RecordCount int64 `json:"record-count"`
	// Encryption key metadata blob
	KeyMetadata *string `json:"key-metadata,omitempty"`
	// List of splittable offsets
	SplitOffsets []int64 `json:"split-offsets,omitempty"`
	SortOrderId *int32 `json:"sort-order-id,omitempty"`
}

type _ContentFile ContentFile

// NewContentFile instantiates a new ContentFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentFile(content string, filePath string, fileFormat FileFormat, specId int32, partition []PrimitiveTypeValue, fileSizeInBytes int64, recordCount int64) *ContentFile {
	this := ContentFile{}
	this.Content = content
	this.FilePath = filePath
	this.FileFormat = fileFormat
	this.SpecId = specId
	this.Partition = partition
	this.FileSizeInBytes = fileSizeInBytes
	this.RecordCount = recordCount
	return &this
}

// NewContentFileWithDefaults instantiates a new ContentFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentFileWithDefaults() *ContentFile {
	this := ContentFile{}
	return &this
}

// GetContent returns the Content field value
func (o *ContentFile) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ContentFile) SetContent(v string) {
	o.Content = v
}

// GetFilePath returns the FilePath field value
func (o *ContentFile) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *ContentFile) SetFilePath(v string) {
	o.FilePath = v
}

// GetFileFormat returns the FileFormat field value
func (o *ContentFile) GetFileFormat() FileFormat {
	if o == nil {
		var ret FileFormat
		return ret
	}

	return o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetFileFormatOk() (*FileFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileFormat, true
}

// SetFileFormat sets field value
func (o *ContentFile) SetFileFormat(v FileFormat) {
	o.FileFormat = v
}

// GetSpecId returns the SpecId field value
func (o *ContentFile) GetSpecId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpecId
}

// GetSpecIdOk returns a tuple with the SpecId field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetSpecIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecId, true
}

// SetSpecId sets field value
func (o *ContentFile) SetSpecId(v int32) {
	o.SpecId = v
}

// GetPartition returns the Partition field value
func (o *ContentFile) GetPartition() []PrimitiveTypeValue {
	if o == nil {
		var ret []PrimitiveTypeValue
		return ret
	}

	return o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetPartitionOk() ([]PrimitiveTypeValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Partition, true
}

// SetPartition sets field value
func (o *ContentFile) SetPartition(v []PrimitiveTypeValue) {
	o.Partition = v
}

// GetFileSizeInBytes returns the FileSizeInBytes field value
func (o *ContentFile) GetFileSizeInBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FileSizeInBytes
}

// GetFileSizeInBytesOk returns a tuple with the FileSizeInBytes field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetFileSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileSizeInBytes, true
}

// SetFileSizeInBytes sets field value
func (o *ContentFile) SetFileSizeInBytes(v int64) {
	o.FileSizeInBytes = v
}

// GetRecordCount returns the RecordCount field value
func (o *ContentFile) GetRecordCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RecordCount
}

// GetRecordCountOk returns a tuple with the RecordCount field value
// and a boolean to check if the value has been set.
func (o *ContentFile) GetRecordCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordCount, true
}

// SetRecordCount sets field value
func (o *ContentFile) SetRecordCount(v int64) {
	o.RecordCount = v
}

// GetKeyMetadata returns the KeyMetadata field value if set, zero value otherwise.
func (o *ContentFile) GetKeyMetadata() string {
	if o == nil || IsNil(o.KeyMetadata) {
		var ret string
		return ret
	}
	return *o.KeyMetadata
}

// GetKeyMetadataOk returns a tuple with the KeyMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentFile) GetKeyMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.KeyMetadata) {
		return nil, false
	}
	return o.KeyMetadata, true
}

// HasKeyMetadata returns a boolean if a field has been set.
func (o *ContentFile) HasKeyMetadata() bool {
	if o != nil && !IsNil(o.KeyMetadata) {
		return true
	}

	return false
}

// SetKeyMetadata gets a reference to the given string and assigns it to the KeyMetadata field.
func (o *ContentFile) SetKeyMetadata(v string) {
	o.KeyMetadata = &v
}

// GetSplitOffsets returns the SplitOffsets field value if set, zero value otherwise.
func (o *ContentFile) GetSplitOffsets() []int64 {
	if o == nil || IsNil(o.SplitOffsets) {
		var ret []int64
		return ret
	}
	return o.SplitOffsets
}

// GetSplitOffsetsOk returns a tuple with the SplitOffsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentFile) GetSplitOffsetsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SplitOffsets) {
		return nil, false
	}
	return o.SplitOffsets, true
}

// HasSplitOffsets returns a boolean if a field has been set.
func (o *ContentFile) HasSplitOffsets() bool {
	if o != nil && !IsNil(o.SplitOffsets) {
		return true
	}

	return false
}

// SetSplitOffsets gets a reference to the given []int64 and assigns it to the SplitOffsets field.
func (o *ContentFile) SetSplitOffsets(v []int64) {
	o.SplitOffsets = v
}

// GetSortOrderId returns the SortOrderId field value if set, zero value otherwise.
func (o *ContentFile) GetSortOrderId() int32 {
	if o == nil || IsNil(o.SortOrderId) {
		var ret int32
		return ret
	}
	return *o.SortOrderId
}

// GetSortOrderIdOk returns a tuple with the SortOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentFile) GetSortOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrderId) {
		return nil, false
	}
	return o.SortOrderId, true
}

// HasSortOrderId returns a boolean if a field has been set.
func (o *ContentFile) HasSortOrderId() bool {
	if o != nil && !IsNil(o.SortOrderId) {
		return true
	}

	return false
}

// SetSortOrderId gets a reference to the given int32 and assigns it to the SortOrderId field.
func (o *ContentFile) SetSortOrderId(v int32) {
	o.SortOrderId = &v
}

func (o ContentFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["file-path"] = o.FilePath
	toSerialize["file-format"] = o.FileFormat
	toSerialize["spec-id"] = o.SpecId
	toSerialize["partition"] = o.Partition
	toSerialize["file-size-in-bytes"] = o.FileSizeInBytes
	toSerialize["record-count"] = o.RecordCount
	if !IsNil(o.KeyMetadata) {
		toSerialize["key-metadata"] = o.KeyMetadata
	}
	if !IsNil(o.SplitOffsets) {
		toSerialize["split-offsets"] = o.SplitOffsets
	}
	if !IsNil(o.SortOrderId) {
		toSerialize["sort-order-id"] = o.SortOrderId
	}
	return toSerialize, nil
}

func (o *ContentFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"file-path",
		"file-format",
		"spec-id",
		"partition",
		"file-size-in-bytes",
		"record-count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentFile := _ContentFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentFile)

	if err != nil {
		return err
	}

	*o = ContentFile(varContentFile)

	return err
}

type NullableContentFile struct {
	value *ContentFile
	isSet bool
}

func (v NullableContentFile) Get() *ContentFile {
	return v.value
}

func (v *NullableContentFile) Set(val *ContentFile) {
	v.value = val
	v.isSet = true
}

func (v NullableContentFile) IsSet() bool {
	return v.isSet
}

func (v *NullableContentFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentFile(val *ContentFile) *NullableContentFile {
	return &NullableContentFile{value: val, isSet: true}
}

func (v NullableContentFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


