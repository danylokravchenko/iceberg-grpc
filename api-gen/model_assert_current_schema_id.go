/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssertCurrentSchemaId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertCurrentSchemaId{}

// AssertCurrentSchemaId The table's current schema id must match the requirement's `current-schema-id`
type AssertCurrentSchemaId struct {
	TableRequirement
	Type *string `json:"type,omitempty"`
	CurrentSchemaId int32 `json:"current-schema-id"`
}

type _AssertCurrentSchemaId AssertCurrentSchemaId

// NewAssertCurrentSchemaId instantiates a new AssertCurrentSchemaId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertCurrentSchemaId(currentSchemaId int32) *AssertCurrentSchemaId {
	this := AssertCurrentSchemaId{}
	return &this
}

// NewAssertCurrentSchemaIdWithDefaults instantiates a new AssertCurrentSchemaId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertCurrentSchemaIdWithDefaults() *AssertCurrentSchemaId {
	this := AssertCurrentSchemaId{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssertCurrentSchemaId) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertCurrentSchemaId) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssertCurrentSchemaId) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssertCurrentSchemaId) SetType(v string) {
	o.Type = &v
}

// GetCurrentSchemaId returns the CurrentSchemaId field value
func (o *AssertCurrentSchemaId) GetCurrentSchemaId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentSchemaId
}

// GetCurrentSchemaIdOk returns a tuple with the CurrentSchemaId field value
// and a boolean to check if the value has been set.
func (o *AssertCurrentSchemaId) GetCurrentSchemaIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentSchemaId, true
}

// SetCurrentSchemaId sets field value
func (o *AssertCurrentSchemaId) SetCurrentSchemaId(v int32) {
	o.CurrentSchemaId = v
}

func (o AssertCurrentSchemaId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertCurrentSchemaId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTableRequirement, errTableRequirement := json.Marshal(o.TableRequirement)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	errTableRequirement = json.Unmarshal([]byte(serializedTableRequirement), &toSerialize)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["current-schema-id"] = o.CurrentSchemaId
	return toSerialize, nil
}

func (o *AssertCurrentSchemaId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current-schema-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssertCurrentSchemaId := _AssertCurrentSchemaId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssertCurrentSchemaId)

	if err != nil {
		return err
	}

	*o = AssertCurrentSchemaId(varAssertCurrentSchemaId)

	return err
}

type NullableAssertCurrentSchemaId struct {
	value *AssertCurrentSchemaId
	isSet bool
}

func (v NullableAssertCurrentSchemaId) Get() *AssertCurrentSchemaId {
	return v.value
}

func (v *NullableAssertCurrentSchemaId) Set(val *AssertCurrentSchemaId) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertCurrentSchemaId) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertCurrentSchemaId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertCurrentSchemaId(val *AssertCurrentSchemaId) *NullableAssertCurrentSchemaId {
	return &NullableAssertCurrentSchemaId{value: val, isSet: true}
}

func (v NullableAssertCurrentSchemaId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertCurrentSchemaId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


