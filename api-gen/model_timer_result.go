/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimerResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimerResult{}

// TimerResult struct for TimerResult
type TimerResult struct {
	TimeUnit string `json:"time-unit"`
	Count int64 `json:"count"`
	TotalDuration int64 `json:"total-duration"`
}

type _TimerResult TimerResult

// NewTimerResult instantiates a new TimerResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimerResult(timeUnit string, count int64, totalDuration int64) *TimerResult {
	this := TimerResult{}
	this.TimeUnit = timeUnit
	this.Count = count
	this.TotalDuration = totalDuration
	return &this
}

// NewTimerResultWithDefaults instantiates a new TimerResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimerResultWithDefaults() *TimerResult {
	this := TimerResult{}
	return &this
}

// GetTimeUnit returns the TimeUnit field value
func (o *TimerResult) GetTimeUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *TimerResult) GetTimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *TimerResult) SetTimeUnit(v string) {
	o.TimeUnit = v
}

// GetCount returns the Count field value
func (o *TimerResult) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TimerResult) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TimerResult) SetCount(v int64) {
	o.Count = v
}

// GetTotalDuration returns the TotalDuration field value
func (o *TimerResult) GetTotalDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalDuration
}

// GetTotalDurationOk returns a tuple with the TotalDuration field value
// and a boolean to check if the value has been set.
func (o *TimerResult) GetTotalDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDuration, true
}

// SetTotalDuration sets field value
func (o *TimerResult) SetTotalDuration(v int64) {
	o.TotalDuration = v
}

func (o TimerResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimerResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["time-unit"] = o.TimeUnit
	toSerialize["count"] = o.Count
	toSerialize["total-duration"] = o.TotalDuration
	return toSerialize, nil
}

func (o *TimerResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"time-unit",
		"count",
		"total-duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimerResult := _TimerResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimerResult)

	if err != nil {
		return err
	}

	*o = TimerResult(varTimerResult)

	return err
}

type NullableTimerResult struct {
	value *TimerResult
	isSet bool
}

func (v NullableTimerResult) Get() *TimerResult {
	return v.value
}

func (v *NullableTimerResult) Set(val *TimerResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTimerResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTimerResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimerResult(val *TimerResult) *NullableTimerResult {
	return &NullableTimerResult{value: val, isSet: true}
}

func (v NullableTimerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimerResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


