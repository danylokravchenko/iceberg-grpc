/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddViewVersionUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddViewVersionUpdate{}

// AddViewVersionUpdate struct for AddViewVersionUpdate
type AddViewVersionUpdate struct {
	BaseUpdate
	Action *string `json:"action,omitempty"`
	ViewVersion ViewVersion `json:"view-version"`
}

type _AddViewVersionUpdate AddViewVersionUpdate

// NewAddViewVersionUpdate instantiates a new AddViewVersionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddViewVersionUpdate(viewVersion ViewVersion) *AddViewVersionUpdate {
	this := AddViewVersionUpdate{}
	return &this
}

// NewAddViewVersionUpdateWithDefaults instantiates a new AddViewVersionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddViewVersionUpdateWithDefaults() *AddViewVersionUpdate {
	this := AddViewVersionUpdate{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AddViewVersionUpdate) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddViewVersionUpdate) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AddViewVersionUpdate) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *AddViewVersionUpdate) SetAction(v string) {
	o.Action = &v
}

// GetViewVersion returns the ViewVersion field value
func (o *AddViewVersionUpdate) GetViewVersion() ViewVersion {
	if o == nil {
		var ret ViewVersion
		return ret
	}

	return o.ViewVersion
}

// GetViewVersionOk returns a tuple with the ViewVersion field value
// and a boolean to check if the value has been set.
func (o *AddViewVersionUpdate) GetViewVersionOk() (*ViewVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewVersion, true
}

// SetViewVersion sets field value
func (o *AddViewVersionUpdate) SetViewVersion(v ViewVersion) {
	o.ViewVersion = v
}

func (o AddViewVersionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddViewVersionUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseUpdate, errBaseUpdate := json.Marshal(o.BaseUpdate)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	errBaseUpdate = json.Unmarshal([]byte(serializedBaseUpdate), &toSerialize)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["view-version"] = o.ViewVersion
	return toSerialize, nil
}

func (o *AddViewVersionUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"view-version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddViewVersionUpdate := _AddViewVersionUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddViewVersionUpdate)

	if err != nil {
		return err
	}

	*o = AddViewVersionUpdate(varAddViewVersionUpdate)

	return err
}

type NullableAddViewVersionUpdate struct {
	value *AddViewVersionUpdate
	isSet bool
}

func (v NullableAddViewVersionUpdate) Get() *AddViewVersionUpdate {
	return v.value
}

func (v *NullableAddViewVersionUpdate) Set(val *AddViewVersionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAddViewVersionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAddViewVersionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddViewVersionUpdate(val *AddViewVersionUpdate) *NullableAddViewVersionUpdate {
	return &NullableAddViewVersionUpdate{value: val, isSet: true}
}

func (v NullableAddViewVersionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddViewVersionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


