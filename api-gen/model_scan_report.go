/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScanReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanReport{}

// ScanReport struct for ScanReport
type ScanReport struct {
	TableName string `json:"table-name"`
	SnapshotId int64 `json:"snapshot-id"`
	Filter Expression `json:"filter"`
	SchemaId int32 `json:"schema-id"`
	ProjectedFieldIds []int32 `json:"projected-field-ids"`
	ProjectedFieldNames []string `json:"projected-field-names"`
	Metrics map[string]MetricResult `json:"metrics"`
	Metadata map[string]string `json:"metadata,omitempty"`
}

type _ScanReport ScanReport

// NewScanReport instantiates a new ScanReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanReport(tableName string, snapshotId int64, filter Expression, schemaId int32, projectedFieldIds []int32, projectedFieldNames []string, metrics map[string]MetricResult) *ScanReport {
	this := ScanReport{}
	this.TableName = tableName
	this.SnapshotId = snapshotId
	this.Filter = filter
	this.SchemaId = schemaId
	this.ProjectedFieldIds = projectedFieldIds
	this.ProjectedFieldNames = projectedFieldNames
	this.Metrics = metrics
	return &this
}

// NewScanReportWithDefaults instantiates a new ScanReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanReportWithDefaults() *ScanReport {
	this := ScanReport{}
	return &this
}

// GetTableName returns the TableName field value
func (o *ScanReport) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *ScanReport) SetTableName(v string) {
	o.TableName = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *ScanReport) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *ScanReport) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetFilter returns the Filter field value
func (o *ScanReport) GetFilter() Expression {
	if o == nil {
		var ret Expression
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetFilterOk() (*Expression, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *ScanReport) SetFilter(v Expression) {
	o.Filter = v
}

// GetSchemaId returns the SchemaId field value
func (o *ScanReport) GetSchemaId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetSchemaIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *ScanReport) SetSchemaId(v int32) {
	o.SchemaId = v
}

// GetProjectedFieldIds returns the ProjectedFieldIds field value
func (o *ScanReport) GetProjectedFieldIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ProjectedFieldIds
}

// GetProjectedFieldIdsOk returns a tuple with the ProjectedFieldIds field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetProjectedFieldIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectedFieldIds, true
}

// SetProjectedFieldIds sets field value
func (o *ScanReport) SetProjectedFieldIds(v []int32) {
	o.ProjectedFieldIds = v
}

// GetProjectedFieldNames returns the ProjectedFieldNames field value
func (o *ScanReport) GetProjectedFieldNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProjectedFieldNames
}

// GetProjectedFieldNamesOk returns a tuple with the ProjectedFieldNames field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetProjectedFieldNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectedFieldNames, true
}

// SetProjectedFieldNames sets field value
func (o *ScanReport) SetProjectedFieldNames(v []string) {
	o.ProjectedFieldNames = v
}

// GetMetrics returns the Metrics field value
func (o *ScanReport) GetMetrics() map[string]MetricResult {
	if o == nil {
		var ret map[string]MetricResult
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *ScanReport) GetMetricsOk() (map[string]MetricResult, bool) {
	if o == nil {
		return map[string]MetricResult{}, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *ScanReport) SetMetrics(v map[string]MetricResult) {
	o.Metrics = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ScanReport) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanReport) GetMetadataOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]string{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ScanReport) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *ScanReport) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o ScanReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["table-name"] = o.TableName
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["filter"] = o.Filter
	toSerialize["schema-id"] = o.SchemaId
	toSerialize["projected-field-ids"] = o.ProjectedFieldIds
	toSerialize["projected-field-names"] = o.ProjectedFieldNames
	toSerialize["metrics"] = o.Metrics
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *ScanReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"table-name",
		"snapshot-id",
		"filter",
		"schema-id",
		"projected-field-ids",
		"projected-field-names",
		"metrics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScanReport := _ScanReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScanReport)

	if err != nil {
		return err
	}

	*o = ScanReport(varScanReport)

	return err
}

type NullableScanReport struct {
	value *ScanReport
	isSet bool
}

func (v NullableScanReport) Get() *ScanReport {
	return v.value
}

func (v *NullableScanReport) Set(val *ScanReport) {
	v.value = val
	v.isSet = true
}

func (v NullableScanReport) IsSet() bool {
	return v.isSet
}

func (v *NullableScanReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanReport(val *ScanReport) *NullableScanReport {
	return &NullableScanReport{value: val, isSet: true}
}

func (v NullableScanReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


