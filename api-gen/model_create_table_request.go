/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateTableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTableRequest{}

// CreateTableRequest struct for CreateTableRequest
type CreateTableRequest struct {
	Name string `json:"name"`
	Location *string `json:"location,omitempty"`
	Schema Schema `json:"schema"`
	PartitionSpec *PartitionSpec `json:"partition-spec,omitempty"`
	WriteOrder *SortOrder `json:"write-order,omitempty"`
	StageCreate *bool `json:"stage-create,omitempty"`
	Properties map[string]string `json:"properties,omitempty"`
}

type _CreateTableRequest CreateTableRequest

// NewCreateTableRequest instantiates a new CreateTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTableRequest(name string, schema Schema) *CreateTableRequest {
	this := CreateTableRequest{}
	this.Name = name
	this.Schema = schema
	return &this
}

// NewCreateTableRequestWithDefaults instantiates a new CreateTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTableRequestWithDefaults() *CreateTableRequest {
	this := CreateTableRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateTableRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateTableRequest) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreateTableRequest) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreateTableRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreateTableRequest) SetLocation(v string) {
	o.Location = &v
}

// GetSchema returns the Schema field value
func (o *CreateTableRequest) GetSchema() Schema {
	if o == nil {
		var ret Schema
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetSchemaOk() (*Schema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *CreateTableRequest) SetSchema(v Schema) {
	o.Schema = v
}

// GetPartitionSpec returns the PartitionSpec field value if set, zero value otherwise.
func (o *CreateTableRequest) GetPartitionSpec() PartitionSpec {
	if o == nil || IsNil(o.PartitionSpec) {
		var ret PartitionSpec
		return ret
	}
	return *o.PartitionSpec
}

// GetPartitionSpecOk returns a tuple with the PartitionSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetPartitionSpecOk() (*PartitionSpec, bool) {
	if o == nil || IsNil(o.PartitionSpec) {
		return nil, false
	}
	return o.PartitionSpec, true
}

// HasPartitionSpec returns a boolean if a field has been set.
func (o *CreateTableRequest) HasPartitionSpec() bool {
	if o != nil && !IsNil(o.PartitionSpec) {
		return true
	}

	return false
}

// SetPartitionSpec gets a reference to the given PartitionSpec and assigns it to the PartitionSpec field.
func (o *CreateTableRequest) SetPartitionSpec(v PartitionSpec) {
	o.PartitionSpec = &v
}

// GetWriteOrder returns the WriteOrder field value if set, zero value otherwise.
func (o *CreateTableRequest) GetWriteOrder() SortOrder {
	if o == nil || IsNil(o.WriteOrder) {
		var ret SortOrder
		return ret
	}
	return *o.WriteOrder
}

// GetWriteOrderOk returns a tuple with the WriteOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetWriteOrderOk() (*SortOrder, bool) {
	if o == nil || IsNil(o.WriteOrder) {
		return nil, false
	}
	return o.WriteOrder, true
}

// HasWriteOrder returns a boolean if a field has been set.
func (o *CreateTableRequest) HasWriteOrder() bool {
	if o != nil && !IsNil(o.WriteOrder) {
		return true
	}

	return false
}

// SetWriteOrder gets a reference to the given SortOrder and assigns it to the WriteOrder field.
func (o *CreateTableRequest) SetWriteOrder(v SortOrder) {
	o.WriteOrder = &v
}

// GetStageCreate returns the StageCreate field value if set, zero value otherwise.
func (o *CreateTableRequest) GetStageCreate() bool {
	if o == nil || IsNil(o.StageCreate) {
		var ret bool
		return ret
	}
	return *o.StageCreate
}

// GetStageCreateOk returns a tuple with the StageCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetStageCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.StageCreate) {
		return nil, false
	}
	return o.StageCreate, true
}

// HasStageCreate returns a boolean if a field has been set.
func (o *CreateTableRequest) HasStageCreate() bool {
	if o != nil && !IsNil(o.StageCreate) {
		return true
	}

	return false
}

// SetStageCreate gets a reference to the given bool and assigns it to the StageCreate field.
func (o *CreateTableRequest) SetStageCreate(v bool) {
	o.StageCreate = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CreateTableRequest) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTableRequest) GetPropertiesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CreateTableRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *CreateTableRequest) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o CreateTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["schema"] = o.Schema
	if !IsNil(o.PartitionSpec) {
		toSerialize["partition-spec"] = o.PartitionSpec
	}
	if !IsNil(o.WriteOrder) {
		toSerialize["write-order"] = o.WriteOrder
	}
	if !IsNil(o.StageCreate) {
		toSerialize["stage-create"] = o.StageCreate
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *CreateTableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTableRequest := _CreateTableRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateTableRequest)

	if err != nil {
		return err
	}

	*o = CreateTableRequest(varCreateTableRequest)

	return err
}

type NullableCreateTableRequest struct {
	value *CreateTableRequest
	isSet bool
}

func (v NullableCreateTableRequest) Get() *CreateTableRequest {
	return v.value
}

func (v *NullableCreateTableRequest) Set(val *CreateTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTableRequest(val *CreateTableRequest) *NullableCreateTableRequest {
	return &NullableCreateTableRequest{value: val, isSet: true}
}

func (v NullableCreateTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


