/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssertCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertCreate{}

// AssertCreate The table must not already exist; used for create transactions
type AssertCreate struct {
	TableRequirement
	Type string `json:"type"`
}

type _AssertCreate AssertCreate

// NewAssertCreate instantiates a new AssertCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertCreate(type_ string) *AssertCreate {
	this := AssertCreate{}
	this.Type = type_
	return &this
}

// NewAssertCreateWithDefaults instantiates a new AssertCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertCreateWithDefaults() *AssertCreate {
	this := AssertCreate{}
	return &this
}

// GetType returns the Type field value
func (o *AssertCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssertCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssertCreate) SetType(v string) {
	o.Type = v
}

func (o AssertCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTableRequirement, errTableRequirement := json.Marshal(o.TableRequirement)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	errTableRequirement = json.Unmarshal([]byte(serializedTableRequirement), &toSerialize)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *AssertCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssertCreate := _AssertCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssertCreate)

	if err != nil {
		return err
	}

	*o = AssertCreate(varAssertCreate)

	return err
}

type NullableAssertCreate struct {
	value *AssertCreate
	isSet bool
}

func (v NullableAssertCreate) Get() *AssertCreate {
	return v.value
}

func (v *NullableAssertCreate) Set(val *AssertCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertCreate(val *AssertCreate) *NullableAssertCreate {
	return &NullableAssertCreate{value: val, isSet: true}
}

func (v NullableAssertCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


