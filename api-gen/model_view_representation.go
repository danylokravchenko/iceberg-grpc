/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ViewRepresentation - struct for ViewRepresentation
type ViewRepresentation struct {
	SQLViewRepresentation *SQLViewRepresentation
}

// SQLViewRepresentationAsViewRepresentation is a convenience function that returns SQLViewRepresentation wrapped in ViewRepresentation
func SQLViewRepresentationAsViewRepresentation(v *SQLViewRepresentation) ViewRepresentation {
	return ViewRepresentation{
		SQLViewRepresentation: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ViewRepresentation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SQLViewRepresentation
	err = newStrictDecoder(data).Decode(&dst.SQLViewRepresentation)
	if err == nil {
		jsonSQLViewRepresentation, _ := json.Marshal(dst.SQLViewRepresentation)
		if string(jsonSQLViewRepresentation) == "{}" { // empty struct
			dst.SQLViewRepresentation = nil
		} else {
			if err = validator.Validate(dst.SQLViewRepresentation); err != nil {
				dst.SQLViewRepresentation = nil
			} else {
				match++
			}
		}
	} else {
		dst.SQLViewRepresentation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SQLViewRepresentation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ViewRepresentation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ViewRepresentation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ViewRepresentation) MarshalJSON() ([]byte, error) {
	if src.SQLViewRepresentation != nil {
		return json.Marshal(&src.SQLViewRepresentation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ViewRepresentation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SQLViewRepresentation != nil {
		return obj.SQLViewRepresentation
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ViewRepresentation) GetActualInstanceValue() (interface{}) {
	if obj.SQLViewRepresentation != nil {
		return *obj.SQLViewRepresentation
	}

	// all schemas are nil
	return nil
}

type NullableViewRepresentation struct {
	value *ViewRepresentation
	isSet bool
}

func (v NullableViewRepresentation) Get() *ViewRepresentation {
	return v.value
}

func (v *NullableViewRepresentation) Set(val *ViewRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableViewRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableViewRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewRepresentation(val *ViewRepresentation) *NullableViewRepresentation {
	return &NullableViewRepresentation{value: val, isSet: true}
}

func (v NullableViewRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


