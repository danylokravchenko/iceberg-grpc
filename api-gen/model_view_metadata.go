/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewMetadata{}

// ViewMetadata struct for ViewMetadata
type ViewMetadata struct {
	ViewUuid string `json:"view-uuid"`
	FormatVersion int32 `json:"format-version"`
	Location string `json:"location"`
	CurrentVersionId int32 `json:"current-version-id"`
	Versions []ViewVersion `json:"versions"`
	VersionLog []ViewHistoryEntry `json:"version-log"`
	Schemas []Schema `json:"schemas"`
	Properties map[string]string `json:"properties,omitempty"`
}

type _ViewMetadata ViewMetadata

// NewViewMetadata instantiates a new ViewMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewMetadata(viewUuid string, formatVersion int32, location string, currentVersionId int32, versions []ViewVersion, versionLog []ViewHistoryEntry, schemas []Schema) *ViewMetadata {
	this := ViewMetadata{}
	this.ViewUuid = viewUuid
	this.FormatVersion = formatVersion
	this.Location = location
	this.CurrentVersionId = currentVersionId
	this.Versions = versions
	this.VersionLog = versionLog
	this.Schemas = schemas
	return &this
}

// NewViewMetadataWithDefaults instantiates a new ViewMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewMetadataWithDefaults() *ViewMetadata {
	this := ViewMetadata{}
	return &this
}

// GetViewUuid returns the ViewUuid field value
func (o *ViewMetadata) GetViewUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewUuid
}

// GetViewUuidOk returns a tuple with the ViewUuid field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetViewUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewUuid, true
}

// SetViewUuid sets field value
func (o *ViewMetadata) SetViewUuid(v string) {
	o.ViewUuid = v
}

// GetFormatVersion returns the FormatVersion field value
func (o *ViewMetadata) GetFormatVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FormatVersion
}

// GetFormatVersionOk returns a tuple with the FormatVersion field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetFormatVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormatVersion, true
}

// SetFormatVersion sets field value
func (o *ViewMetadata) SetFormatVersion(v int32) {
	o.FormatVersion = v
}

// GetLocation returns the Location field value
func (o *ViewMetadata) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *ViewMetadata) SetLocation(v string) {
	o.Location = v
}

// GetCurrentVersionId returns the CurrentVersionId field value
func (o *ViewMetadata) GetCurrentVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentVersionId
}

// GetCurrentVersionIdOk returns a tuple with the CurrentVersionId field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetCurrentVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentVersionId, true
}

// SetCurrentVersionId sets field value
func (o *ViewMetadata) SetCurrentVersionId(v int32) {
	o.CurrentVersionId = v
}

// GetVersions returns the Versions field value
func (o *ViewMetadata) GetVersions() []ViewVersion {
	if o == nil {
		var ret []ViewVersion
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetVersionsOk() ([]ViewVersion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *ViewMetadata) SetVersions(v []ViewVersion) {
	o.Versions = v
}

// GetVersionLog returns the VersionLog field value
func (o *ViewMetadata) GetVersionLog() []ViewHistoryEntry {
	if o == nil {
		var ret []ViewHistoryEntry
		return ret
	}

	return o.VersionLog
}

// GetVersionLogOk returns a tuple with the VersionLog field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetVersionLogOk() ([]ViewHistoryEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionLog, true
}

// SetVersionLog sets field value
func (o *ViewMetadata) SetVersionLog(v []ViewHistoryEntry) {
	o.VersionLog = v
}

// GetSchemas returns the Schemas field value
func (o *ViewMetadata) GetSchemas() []Schema {
	if o == nil {
		var ret []Schema
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetSchemasOk() ([]Schema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ViewMetadata) SetSchemas(v []Schema) {
	o.Schemas = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ViewMetadata) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewMetadata) GetPropertiesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ViewMetadata) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *ViewMetadata) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o ViewMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["view-uuid"] = o.ViewUuid
	toSerialize["format-version"] = o.FormatVersion
	toSerialize["location"] = o.Location
	toSerialize["current-version-id"] = o.CurrentVersionId
	toSerialize["versions"] = o.Versions
	toSerialize["version-log"] = o.VersionLog
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *ViewMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"view-uuid",
		"format-version",
		"location",
		"current-version-id",
		"versions",
		"version-log",
		"schemas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewMetadata := _ViewMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewMetadata)

	if err != nil {
		return err
	}

	*o = ViewMetadata(varViewMetadata)

	return err
}

type NullableViewMetadata struct {
	value *ViewMetadata
	isSet bool
}

func (v NullableViewMetadata) Get() *ViewMetadata {
	return v.value
}

func (v *NullableViewMetadata) Set(val *ViewMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableViewMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableViewMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewMetadata(val *ViewMetadata) *NullableViewMetadata {
	return &NullableViewMetadata{value: val, isSet: true}
}

func (v NullableViewMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


