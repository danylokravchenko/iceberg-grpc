/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoadViewResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadViewResult{}

// LoadViewResult Result used when a view is successfully loaded.   The view metadata JSON is returned in the `metadata` field. The corresponding file location of view metadata is returned in the `metadata-location` field. Clients can check whether metadata has changed by comparing metadata locations after the view has been created.  The `config` map returns view-specific configuration for the view's resources.  The following configurations should be respected by clients:  ## General Configurations  - `token`: Authorization bearer token to use for view requests if OAuth2 security is enabled 
type LoadViewResult struct {
	MetadataLocation string `json:"metadata-location"`
	Metadata ViewMetadata `json:"metadata"`
	Config map[string]string `json:"config,omitempty"`
}

type _LoadViewResult LoadViewResult

// NewLoadViewResult instantiates a new LoadViewResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadViewResult(metadataLocation string, metadata ViewMetadata) *LoadViewResult {
	this := LoadViewResult{}
	this.MetadataLocation = metadataLocation
	this.Metadata = metadata
	return &this
}

// NewLoadViewResultWithDefaults instantiates a new LoadViewResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadViewResultWithDefaults() *LoadViewResult {
	this := LoadViewResult{}
	return &this
}

// GetMetadataLocation returns the MetadataLocation field value
func (o *LoadViewResult) GetMetadataLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataLocation
}

// GetMetadataLocationOk returns a tuple with the MetadataLocation field value
// and a boolean to check if the value has been set.
func (o *LoadViewResult) GetMetadataLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataLocation, true
}

// SetMetadataLocation sets field value
func (o *LoadViewResult) SetMetadataLocation(v string) {
	o.MetadataLocation = v
}

// GetMetadata returns the Metadata field value
func (o *LoadViewResult) GetMetadata() ViewMetadata {
	if o == nil {
		var ret ViewMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *LoadViewResult) GetMetadataOk() (*ViewMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *LoadViewResult) SetMetadata(v ViewMetadata) {
	o.Metadata = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *LoadViewResult) GetConfig() map[string]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadViewResult) GetConfigOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]string{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *LoadViewResult) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *LoadViewResult) SetConfig(v map[string]string) {
	o.Config = v
}

func (o LoadViewResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadViewResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata-location"] = o.MetadataLocation
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

func (o *LoadViewResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata-location",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadViewResult := _LoadViewResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadViewResult)

	if err != nil {
		return err
	}

	*o = LoadViewResult(varLoadViewResult)

	return err
}

type NullableLoadViewResult struct {
	value *LoadViewResult
	isSet bool
}

func (v NullableLoadViewResult) Get() *LoadViewResult {
	return v.value
}

func (v *NullableLoadViewResult) Set(val *LoadViewResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadViewResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadViewResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadViewResult(val *LoadViewResult) *NullableLoadViewResult {
	return &NullableLoadViewResult{value: val, isSet: true}
}

func (v NullableLoadViewResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadViewResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


