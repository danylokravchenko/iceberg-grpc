/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FailedPlanningResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailedPlanningResult{}

// FailedPlanningResult Failed server-side planning result
type FailedPlanningResult struct {
	Error ErrorModel `json:"error"`
	Status PlanStatus `json:"status"`
}

type _FailedPlanningResult FailedPlanningResult

// NewFailedPlanningResult instantiates a new FailedPlanningResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedPlanningResult(error_ ErrorModel, status PlanStatus) *FailedPlanningResult {
	this := FailedPlanningResult{}
	this.Error = error_
	this.Status = status
	return &this
}

// NewFailedPlanningResultWithDefaults instantiates a new FailedPlanningResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedPlanningResultWithDefaults() *FailedPlanningResult {
	this := FailedPlanningResult{}
	return &this
}

// GetError returns the Error field value
func (o *FailedPlanningResult) GetError() ErrorModel {
	if o == nil {
		var ret ErrorModel
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *FailedPlanningResult) GetErrorOk() (*ErrorModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *FailedPlanningResult) SetError(v ErrorModel) {
	o.Error = v
}

// GetStatus returns the Status field value
func (o *FailedPlanningResult) GetStatus() PlanStatus {
	if o == nil {
		var ret PlanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FailedPlanningResult) GetStatusOk() (*PlanStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FailedPlanningResult) SetStatus(v PlanStatus) {
	o.Status = v
}

func (o FailedPlanningResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailedPlanningResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["error"] = o.Error
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *FailedPlanningResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"error",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFailedPlanningResult := _FailedPlanningResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFailedPlanningResult)

	if err != nil {
		return err
	}

	*o = FailedPlanningResult(varFailedPlanningResult)

	return err
}

type NullableFailedPlanningResult struct {
	value *FailedPlanningResult
	isSet bool
}

func (v NullableFailedPlanningResult) Get() *FailedPlanningResult {
	return v.value
}

func (v *NullableFailedPlanningResult) Set(val *FailedPlanningResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedPlanningResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedPlanningResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedPlanningResult(val *FailedPlanningResult) *NullableFailedPlanningResult {
	return &NullableFailedPlanningResult{value: val, isSet: true}
}

func (v NullableFailedPlanningResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedPlanningResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


