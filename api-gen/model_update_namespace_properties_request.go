/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
)

// checks if the UpdateNamespacePropertiesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNamespacePropertiesRequest{}

// UpdateNamespacePropertiesRequest struct for UpdateNamespacePropertiesRequest
type UpdateNamespacePropertiesRequest struct {
	Removals []string `json:"removals,omitempty"`
	Updates map[string]string `json:"updates,omitempty"`
}

// NewUpdateNamespacePropertiesRequest instantiates a new UpdateNamespacePropertiesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNamespacePropertiesRequest() *UpdateNamespacePropertiesRequest {
	this := UpdateNamespacePropertiesRequest{}
	return &this
}

// NewUpdateNamespacePropertiesRequestWithDefaults instantiates a new UpdateNamespacePropertiesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNamespacePropertiesRequestWithDefaults() *UpdateNamespacePropertiesRequest {
	this := UpdateNamespacePropertiesRequest{}
	return &this
}

// GetRemovals returns the Removals field value if set, zero value otherwise.
func (o *UpdateNamespacePropertiesRequest) GetRemovals() []string {
	if o == nil || IsNil(o.Removals) {
		var ret []string
		return ret
	}
	return o.Removals
}

// GetRemovalsOk returns a tuple with the Removals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNamespacePropertiesRequest) GetRemovalsOk() ([]string, bool) {
	if o == nil || IsNil(o.Removals) {
		return nil, false
	}
	return o.Removals, true
}

// HasRemovals returns a boolean if a field has been set.
func (o *UpdateNamespacePropertiesRequest) HasRemovals() bool {
	if o != nil && !IsNil(o.Removals) {
		return true
	}

	return false
}

// SetRemovals gets a reference to the given []string and assigns it to the Removals field.
func (o *UpdateNamespacePropertiesRequest) SetRemovals(v []string) {
	o.Removals = v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *UpdateNamespacePropertiesRequest) GetUpdates() map[string]string {
	if o == nil || IsNil(o.Updates) {
		var ret map[string]string
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNamespacePropertiesRequest) GetUpdatesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Updates) {
		return map[string]string{}, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *UpdateNamespacePropertiesRequest) HasUpdates() bool {
	if o != nil && !IsNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given map[string]string and assigns it to the Updates field.
func (o *UpdateNamespacePropertiesRequest) SetUpdates(v map[string]string) {
	o.Updates = v
}

func (o UpdateNamespacePropertiesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNamespacePropertiesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Removals) {
		toSerialize["removals"] = o.Removals
	}
	if !IsNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	return toSerialize, nil
}

type NullableUpdateNamespacePropertiesRequest struct {
	value *UpdateNamespacePropertiesRequest
	isSet bool
}

func (v NullableUpdateNamespacePropertiesRequest) Get() *UpdateNamespacePropertiesRequest {
	return v.value
}

func (v *NullableUpdateNamespacePropertiesRequest) Set(val *UpdateNamespacePropertiesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNamespacePropertiesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNamespacePropertiesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNamespacePropertiesRequest(val *UpdateNamespacePropertiesRequest) *NullableUpdateNamespacePropertiesRequest {
	return &NullableUpdateNamespacePropertiesRequest{value: val, isSet: true}
}

func (v NullableUpdateNamespacePropertiesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNamespacePropertiesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


