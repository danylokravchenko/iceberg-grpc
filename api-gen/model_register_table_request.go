/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterTableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterTableRequest{}

// RegisterTableRequest struct for RegisterTableRequest
type RegisterTableRequest struct {
	Name string `json:"name"`
	MetadataLocation string `json:"metadata-location"`
	// Whether to overwrite table metadata if the table already exists
	Overwrite *bool `json:"overwrite,omitempty"`
}

type _RegisterTableRequest RegisterTableRequest

// NewRegisterTableRequest instantiates a new RegisterTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterTableRequest(name string, metadataLocation string) *RegisterTableRequest {
	this := RegisterTableRequest{}
	this.Name = name
	this.MetadataLocation = metadataLocation
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// NewRegisterTableRequestWithDefaults instantiates a new RegisterTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterTableRequestWithDefaults() *RegisterTableRequest {
	this := RegisterTableRequest{}
	var overwrite bool = false
	this.Overwrite = &overwrite
	return &this
}

// GetName returns the Name field value
func (o *RegisterTableRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisterTableRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisterTableRequest) SetName(v string) {
	o.Name = v
}

// GetMetadataLocation returns the MetadataLocation field value
func (o *RegisterTableRequest) GetMetadataLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataLocation
}

// GetMetadataLocationOk returns a tuple with the MetadataLocation field value
// and a boolean to check if the value has been set.
func (o *RegisterTableRequest) GetMetadataLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataLocation, true
}

// SetMetadataLocation sets field value
func (o *RegisterTableRequest) SetMetadataLocation(v string) {
	o.MetadataLocation = v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *RegisterTableRequest) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterTableRequest) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RegisterTableRequest) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *RegisterTableRequest) SetOverwrite(v bool) {
	o.Overwrite = &v
}

func (o RegisterTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterTableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["metadata-location"] = o.MetadataLocation
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	return toSerialize, nil
}

func (o *RegisterTableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"metadata-location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterTableRequest := _RegisterTableRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterTableRequest)

	if err != nil {
		return err
	}

	*o = RegisterTableRequest(varRegisterTableRequest)

	return err
}

type NullableRegisterTableRequest struct {
	value *RegisterTableRequest
	isSet bool
}

func (v NullableRegisterTableRequest) Get() *RegisterTableRequest {
	return v.value
}

func (v *NullableRegisterTableRequest) Set(val *RegisterTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterTableRequest(val *RegisterTableRequest) *NullableRegisterTableRequest {
	return &NullableRegisterTableRequest{value: val, isSet: true}
}

func (v NullableRegisterTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


