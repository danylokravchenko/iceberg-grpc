/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
)


// MetricResult struct for MetricResult
type MetricResult struct {
	CounterResult *CounterResult
	TimerResult *TimerResult
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MetricResult) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CounterResult
	err = json.Unmarshal(data, &dst.CounterResult);
	if err == nil {
		jsonCounterResult, _ := json.Marshal(dst.CounterResult)
		if string(jsonCounterResult) == "{}" { // empty struct
			dst.CounterResult = nil
		} else {
			return nil // data stored in dst.CounterResult, return on the first match
		}
	} else {
		dst.CounterResult = nil
	}

	// try to unmarshal JSON data into TimerResult
	err = json.Unmarshal(data, &dst.TimerResult);
	if err == nil {
		jsonTimerResult, _ := json.Marshal(dst.TimerResult)
		if string(jsonTimerResult) == "{}" { // empty struct
			dst.TimerResult = nil
		} else {
			return nil // data stored in dst.TimerResult, return on the first match
		}
	} else {
		dst.TimerResult = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MetricResult)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MetricResult) MarshalJSON() ([]byte, error) {
	if src.CounterResult != nil {
		return json.Marshal(&src.CounterResult)
	}

	if src.TimerResult != nil {
		return json.Marshal(&src.TimerResult)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableMetricResult struct {
	value *MetricResult
	isSet bool
}

func (v NullableMetricResult) Get() *MetricResult {
	return v.value
}

func (v *NullableMetricResult) Set(val *MetricResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricResult(val *MetricResult) *NullableMetricResult {
	return &NullableMetricResult{value: val, isSet: true}
}

func (v NullableMetricResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


