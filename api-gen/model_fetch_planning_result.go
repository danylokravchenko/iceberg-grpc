/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FetchPlanningResult - Result of server-side scan planning for fetchPlanningResult
type FetchPlanningResult struct {
	CompletedPlanningResult *CompletedPlanningResult
	EmptyPlanningResult *EmptyPlanningResult
	FailedPlanningResult *FailedPlanningResult
}

// CompletedPlanningResultAsFetchPlanningResult is a convenience function that returns CompletedPlanningResult wrapped in FetchPlanningResult
func CompletedPlanningResultAsFetchPlanningResult(v *CompletedPlanningResult) FetchPlanningResult {
	return FetchPlanningResult{
		CompletedPlanningResult: v,
	}
}

// EmptyPlanningResultAsFetchPlanningResult is a convenience function that returns EmptyPlanningResult wrapped in FetchPlanningResult
func EmptyPlanningResultAsFetchPlanningResult(v *EmptyPlanningResult) FetchPlanningResult {
	return FetchPlanningResult{
		EmptyPlanningResult: v,
	}
}

// FailedPlanningResultAsFetchPlanningResult is a convenience function that returns FailedPlanningResult wrapped in FetchPlanningResult
func FailedPlanningResultAsFetchPlanningResult(v *FailedPlanningResult) FetchPlanningResult {
	return FetchPlanningResult{
		FailedPlanningResult: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FetchPlanningResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CompletedPlanningResult
	err = newStrictDecoder(data).Decode(&dst.CompletedPlanningResult)
	if err == nil {
		jsonCompletedPlanningResult, _ := json.Marshal(dst.CompletedPlanningResult)
		if string(jsonCompletedPlanningResult) == "{}" { // empty struct
			dst.CompletedPlanningResult = nil
		} else {
			if err = validator.Validate(dst.CompletedPlanningResult); err != nil {
				dst.CompletedPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletedPlanningResult = nil
	}

	// try to unmarshal data into EmptyPlanningResult
	err = newStrictDecoder(data).Decode(&dst.EmptyPlanningResult)
	if err == nil {
		jsonEmptyPlanningResult, _ := json.Marshal(dst.EmptyPlanningResult)
		if string(jsonEmptyPlanningResult) == "{}" { // empty struct
			dst.EmptyPlanningResult = nil
		} else {
			if err = validator.Validate(dst.EmptyPlanningResult); err != nil {
				dst.EmptyPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmptyPlanningResult = nil
	}

	// try to unmarshal data into FailedPlanningResult
	err = newStrictDecoder(data).Decode(&dst.FailedPlanningResult)
	if err == nil {
		jsonFailedPlanningResult, _ := json.Marshal(dst.FailedPlanningResult)
		if string(jsonFailedPlanningResult) == "{}" { // empty struct
			dst.FailedPlanningResult = nil
		} else {
			if err = validator.Validate(dst.FailedPlanningResult); err != nil {
				dst.FailedPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.FailedPlanningResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CompletedPlanningResult = nil
		dst.EmptyPlanningResult = nil
		dst.FailedPlanningResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FetchPlanningResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FetchPlanningResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FetchPlanningResult) MarshalJSON() ([]byte, error) {
	if src.CompletedPlanningResult != nil {
		return json.Marshal(&src.CompletedPlanningResult)
	}

	if src.EmptyPlanningResult != nil {
		return json.Marshal(&src.EmptyPlanningResult)
	}

	if src.FailedPlanningResult != nil {
		return json.Marshal(&src.FailedPlanningResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FetchPlanningResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CompletedPlanningResult != nil {
		return obj.CompletedPlanningResult
	}

	if obj.EmptyPlanningResult != nil {
		return obj.EmptyPlanningResult
	}

	if obj.FailedPlanningResult != nil {
		return obj.FailedPlanningResult
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FetchPlanningResult) GetActualInstanceValue() (interface{}) {
	if obj.CompletedPlanningResult != nil {
		return *obj.CompletedPlanningResult
	}

	if obj.EmptyPlanningResult != nil {
		return *obj.EmptyPlanningResult
	}

	if obj.FailedPlanningResult != nil {
		return *obj.FailedPlanningResult
	}

	// all schemas are nil
	return nil
}

type NullableFetchPlanningResult struct {
	value *FetchPlanningResult
	isSet bool
}

func (v NullableFetchPlanningResult) Get() *FetchPlanningResult {
	return v.value
}

func (v *NullableFetchPlanningResult) Set(val *FetchPlanningResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchPlanningResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchPlanningResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchPlanningResult(val *FetchPlanningResult) *NullableFetchPlanningResult {
	return &NullableFetchPlanningResult{value: val, isSet: true}
}

func (v NullableFetchPlanningResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchPlanningResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


