/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileScanTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileScanTask{}

// FileScanTask struct for FileScanTask
type FileScanTask struct {
	DataFile DataFile `json:"data-file"`
	// A list of indices in the delete files array (0-based)
	DeleteFileReferences []int32 `json:"delete-file-references,omitempty"`
	// An optional filter to be applied to rows in this file scan task. If the residual is not present, the client must produce the residual or use the original filter.
	ResidualFilter *Expression `json:"residual-filter,omitempty"`
}

type _FileScanTask FileScanTask

// NewFileScanTask instantiates a new FileScanTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileScanTask(dataFile DataFile) *FileScanTask {
	this := FileScanTask{}
	this.DataFile = dataFile
	return &this
}

// NewFileScanTaskWithDefaults instantiates a new FileScanTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileScanTaskWithDefaults() *FileScanTask {
	this := FileScanTask{}
	return &this
}

// GetDataFile returns the DataFile field value
func (o *FileScanTask) GetDataFile() DataFile {
	if o == nil {
		var ret DataFile
		return ret
	}

	return o.DataFile
}

// GetDataFileOk returns a tuple with the DataFile field value
// and a boolean to check if the value has been set.
func (o *FileScanTask) GetDataFileOk() (*DataFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataFile, true
}

// SetDataFile sets field value
func (o *FileScanTask) SetDataFile(v DataFile) {
	o.DataFile = v
}

// GetDeleteFileReferences returns the DeleteFileReferences field value if set, zero value otherwise.
func (o *FileScanTask) GetDeleteFileReferences() []int32 {
	if o == nil || IsNil(o.DeleteFileReferences) {
		var ret []int32
		return ret
	}
	return o.DeleteFileReferences
}

// GetDeleteFileReferencesOk returns a tuple with the DeleteFileReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileScanTask) GetDeleteFileReferencesOk() ([]int32, bool) {
	if o == nil || IsNil(o.DeleteFileReferences) {
		return nil, false
	}
	return o.DeleteFileReferences, true
}

// HasDeleteFileReferences returns a boolean if a field has been set.
func (o *FileScanTask) HasDeleteFileReferences() bool {
	if o != nil && !IsNil(o.DeleteFileReferences) {
		return true
	}

	return false
}

// SetDeleteFileReferences gets a reference to the given []int32 and assigns it to the DeleteFileReferences field.
func (o *FileScanTask) SetDeleteFileReferences(v []int32) {
	o.DeleteFileReferences = v
}

// GetResidualFilter returns the ResidualFilter field value if set, zero value otherwise.
func (o *FileScanTask) GetResidualFilter() Expression {
	if o == nil || IsNil(o.ResidualFilter) {
		var ret Expression
		return ret
	}
	return *o.ResidualFilter
}

// GetResidualFilterOk returns a tuple with the ResidualFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileScanTask) GetResidualFilterOk() (*Expression, bool) {
	if o == nil || IsNil(o.ResidualFilter) {
		return nil, false
	}
	return o.ResidualFilter, true
}

// HasResidualFilter returns a boolean if a field has been set.
func (o *FileScanTask) HasResidualFilter() bool {
	if o != nil && !IsNil(o.ResidualFilter) {
		return true
	}

	return false
}

// SetResidualFilter gets a reference to the given Expression and assigns it to the ResidualFilter field.
func (o *FileScanTask) SetResidualFilter(v Expression) {
	o.ResidualFilter = &v
}

func (o FileScanTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileScanTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data-file"] = o.DataFile
	if !IsNil(o.DeleteFileReferences) {
		toSerialize["delete-file-references"] = o.DeleteFileReferences
	}
	if !IsNil(o.ResidualFilter) {
		toSerialize["residual-filter"] = o.ResidualFilter
	}
	return toSerialize, nil
}

func (o *FileScanTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data-file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileScanTask := _FileScanTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileScanTask)

	if err != nil {
		return err
	}

	*o = FileScanTask(varFileScanTask)

	return err
}

type NullableFileScanTask struct {
	value *FileScanTask
	isSet bool
}

func (v NullableFileScanTask) Get() *FileScanTask {
	return v.value
}

func (v *NullableFileScanTask) Set(val *FileScanTask) {
	v.value = val
	v.isSet = true
}

func (v NullableFileScanTask) IsSet() bool {
	return v.isSet
}

func (v *NullableFileScanTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileScanTask(val *FileScanTask) *NullableFileScanTask {
	return &NullableFileScanTask{value: val, isSet: true}
}

func (v NullableFileScanTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileScanTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


