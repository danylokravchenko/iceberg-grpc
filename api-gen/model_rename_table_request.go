/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RenameTableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameTableRequest{}

// RenameTableRequest struct for RenameTableRequest
type RenameTableRequest struct {
	Source TableIdentifier `json:"source"`
	Destination TableIdentifier `json:"destination"`
}

type _RenameTableRequest RenameTableRequest

// NewRenameTableRequest instantiates a new RenameTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameTableRequest(source TableIdentifier, destination TableIdentifier) *RenameTableRequest {
	this := RenameTableRequest{}
	this.Source = source
	this.Destination = destination
	return &this
}

// NewRenameTableRequestWithDefaults instantiates a new RenameTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameTableRequestWithDefaults() *RenameTableRequest {
	this := RenameTableRequest{}
	return &this
}

// GetSource returns the Source field value
func (o *RenameTableRequest) GetSource() TableIdentifier {
	if o == nil {
		var ret TableIdentifier
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RenameTableRequest) GetSourceOk() (*TableIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RenameTableRequest) SetSource(v TableIdentifier) {
	o.Source = v
}

// GetDestination returns the Destination field value
func (o *RenameTableRequest) GetDestination() TableIdentifier {
	if o == nil {
		var ret TableIdentifier
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *RenameTableRequest) GetDestinationOk() (*TableIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *RenameTableRequest) SetDestination(v TableIdentifier) {
	o.Destination = v
}

func (o RenameTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameTableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["destination"] = o.Destination
	return toSerialize, nil
}

func (o *RenameTableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameTableRequest := _RenameTableRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRenameTableRequest)

	if err != nil {
		return err
	}

	*o = RenameTableRequest(varRenameTableRequest)

	return err
}

type NullableRenameTableRequest struct {
	value *RenameTableRequest
	isSet bool
}

func (v NullableRenameTableRequest) Get() *RenameTableRequest {
	return v.value
}

func (v *NullableRenameTableRequest) Set(val *RenameTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameTableRequest(val *RenameTableRequest) *NullableRenameTableRequest {
	return &NullableRenameTableRequest{value: val, isSet: true}
}

func (v NullableRenameTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


