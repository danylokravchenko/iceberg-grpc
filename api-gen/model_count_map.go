/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
)

// checks if the CountMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountMap{}

// CountMap struct for CountMap
type CountMap struct {
	// List of integer column ids for each corresponding value
	Keys []int32 `json:"keys,omitempty"`
	// List of Long values, matched to 'keys' by index
	Values []int64 `json:"values,omitempty"`
}

// NewCountMap instantiates a new CountMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountMap() *CountMap {
	this := CountMap{}
	return &this
}

// NewCountMapWithDefaults instantiates a new CountMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountMapWithDefaults() *CountMap {
	this := CountMap{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *CountMap) GetKeys() []int32 {
	if o == nil || IsNil(o.Keys) {
		var ret []int32
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountMap) GetKeysOk() ([]int32, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *CountMap) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []int32 and assigns it to the Keys field.
func (o *CountMap) SetKeys(v []int32) {
	o.Keys = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *CountMap) GetValues() []int64 {
	if o == nil || IsNil(o.Values) {
		var ret []int64
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountMap) GetValuesOk() ([]int64, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *CountMap) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []int64 and assigns it to the Values field.
func (o *CountMap) SetValues(v []int64) {
	o.Values = v
}

func (o CountMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableCountMap struct {
	value *CountMap
	isSet bool
}

func (v NullableCountMap) Get() *CountMap {
	return v.value
}

func (v *NullableCountMap) Set(val *CountMap) {
	v.value = val
	v.isSet = true
}

func (v NullableCountMap) IsSet() bool {
	return v.isSet
}

func (v *NullableCountMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountMap(val *CountMap) *NullableCountMap {
	return &NullableCountMap{value: val, isSet: true}
}

func (v NullableCountMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


