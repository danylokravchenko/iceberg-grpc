/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitTableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitTableResponse{}

// CommitTableResponse struct for CommitTableResponse
type CommitTableResponse struct {
	MetadataLocation string `json:"metadata-location"`
	Metadata TableMetadata `json:"metadata"`
}

type _CommitTableResponse CommitTableResponse

// NewCommitTableResponse instantiates a new CommitTableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitTableResponse(metadataLocation string, metadata TableMetadata) *CommitTableResponse {
	this := CommitTableResponse{}
	this.MetadataLocation = metadataLocation
	this.Metadata = metadata
	return &this
}

// NewCommitTableResponseWithDefaults instantiates a new CommitTableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitTableResponseWithDefaults() *CommitTableResponse {
	this := CommitTableResponse{}
	return &this
}

// GetMetadataLocation returns the MetadataLocation field value
func (o *CommitTableResponse) GetMetadataLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataLocation
}

// GetMetadataLocationOk returns a tuple with the MetadataLocation field value
// and a boolean to check if the value has been set.
func (o *CommitTableResponse) GetMetadataLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataLocation, true
}

// SetMetadataLocation sets field value
func (o *CommitTableResponse) SetMetadataLocation(v string) {
	o.MetadataLocation = v
}

// GetMetadata returns the Metadata field value
func (o *CommitTableResponse) GetMetadata() TableMetadata {
	if o == nil {
		var ret TableMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *CommitTableResponse) GetMetadataOk() (*TableMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *CommitTableResponse) SetMetadata(v TableMetadata) {
	o.Metadata = v
}

func (o CommitTableResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitTableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata-location"] = o.MetadataLocation
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *CommitTableResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata-location",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitTableResponse := _CommitTableResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitTableResponse)

	if err != nil {
		return err
	}

	*o = CommitTableResponse(varCommitTableResponse)

	return err
}

type NullableCommitTableResponse struct {
	value *CommitTableResponse
	isSet bool
}

func (v NullableCommitTableResponse) Get() *CommitTableResponse {
	return v.value
}

func (v *NullableCommitTableResponse) Set(val *CommitTableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitTableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitTableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitTableResponse(val *CommitTableResponse) *NullableCommitTableResponse {
	return &NullableCommitTableResponse{value: val, isSet: true}
}

func (v NullableCommitTableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitTableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


