/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeleteFile - struct for DeleteFile
type DeleteFile struct {
	EqualityDeleteFile *EqualityDeleteFile
	PositionDeleteFile *PositionDeleteFile
}

// EqualityDeleteFileAsDeleteFile is a convenience function that returns EqualityDeleteFile wrapped in DeleteFile
func EqualityDeleteFileAsDeleteFile(v *EqualityDeleteFile) DeleteFile {
	return DeleteFile{
		EqualityDeleteFile: v,
	}
}

// PositionDeleteFileAsDeleteFile is a convenience function that returns PositionDeleteFile wrapped in DeleteFile
func PositionDeleteFileAsDeleteFile(v *PositionDeleteFile) DeleteFile {
	return DeleteFile{
		PositionDeleteFile: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeleteFile) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EqualityDeleteFile
	err = newStrictDecoder(data).Decode(&dst.EqualityDeleteFile)
	if err == nil {
		jsonEqualityDeleteFile, _ := json.Marshal(dst.EqualityDeleteFile)
		if string(jsonEqualityDeleteFile) == "{}" { // empty struct
			dst.EqualityDeleteFile = nil
		} else {
			if err = validator.Validate(dst.EqualityDeleteFile); err != nil {
				dst.EqualityDeleteFile = nil
			} else {
				match++
			}
		}
	} else {
		dst.EqualityDeleteFile = nil
	}

	// try to unmarshal data into PositionDeleteFile
	err = newStrictDecoder(data).Decode(&dst.PositionDeleteFile)
	if err == nil {
		jsonPositionDeleteFile, _ := json.Marshal(dst.PositionDeleteFile)
		if string(jsonPositionDeleteFile) == "{}" { // empty struct
			dst.PositionDeleteFile = nil
		} else {
			if err = validator.Validate(dst.PositionDeleteFile); err != nil {
				dst.PositionDeleteFile = nil
			} else {
				match++
			}
		}
	} else {
		dst.PositionDeleteFile = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EqualityDeleteFile = nil
		dst.PositionDeleteFile = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeleteFile)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeleteFile)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeleteFile) MarshalJSON() ([]byte, error) {
	if src.EqualityDeleteFile != nil {
		return json.Marshal(&src.EqualityDeleteFile)
	}

	if src.PositionDeleteFile != nil {
		return json.Marshal(&src.PositionDeleteFile)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeleteFile) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EqualityDeleteFile != nil {
		return obj.EqualityDeleteFile
	}

	if obj.PositionDeleteFile != nil {
		return obj.PositionDeleteFile
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeleteFile) GetActualInstanceValue() (interface{}) {
	if obj.EqualityDeleteFile != nil {
		return *obj.EqualityDeleteFile
	}

	if obj.PositionDeleteFile != nil {
		return *obj.PositionDeleteFile
	}

	// all schemas are nil
	return nil
}

type NullableDeleteFile struct {
	value *DeleteFile
	isSet bool
}

func (v NullableDeleteFile) Get() *DeleteFile {
	return v.value
}

func (v *NullableDeleteFile) Set(val *DeleteFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteFile(val *DeleteFile) *NullableDeleteFile {
	return &NullableDeleteFile{value: val, isSet: true}
}

func (v NullableDeleteFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


