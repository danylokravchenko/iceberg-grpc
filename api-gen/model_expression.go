/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Expression - struct for Expression
type Expression struct {
	AndOrExpression *AndOrExpression
	FalseExpression *FalseExpression
	LiteralExpression *LiteralExpression
	NotExpression *NotExpression
	SetExpression *SetExpression
	TrueExpression *TrueExpression
	UnaryExpression *UnaryExpression
}

// AndOrExpressionAsExpression is a convenience function that returns AndOrExpression wrapped in Expression
func AndOrExpressionAsExpression(v *AndOrExpression) Expression {
	return Expression{
		AndOrExpression: v,
	}
}

// FalseExpressionAsExpression is a convenience function that returns FalseExpression wrapped in Expression
func FalseExpressionAsExpression(v *FalseExpression) Expression {
	return Expression{
		FalseExpression: v,
	}
}

// LiteralExpressionAsExpression is a convenience function that returns LiteralExpression wrapped in Expression
func LiteralExpressionAsExpression(v *LiteralExpression) Expression {
	return Expression{
		LiteralExpression: v,
	}
}

// NotExpressionAsExpression is a convenience function that returns NotExpression wrapped in Expression
func NotExpressionAsExpression(v *NotExpression) Expression {
	return Expression{
		NotExpression: v,
	}
}

// SetExpressionAsExpression is a convenience function that returns SetExpression wrapped in Expression
func SetExpressionAsExpression(v *SetExpression) Expression {
	return Expression{
		SetExpression: v,
	}
}

// TrueExpressionAsExpression is a convenience function that returns TrueExpression wrapped in Expression
func TrueExpressionAsExpression(v *TrueExpression) Expression {
	return Expression{
		TrueExpression: v,
	}
}

// UnaryExpressionAsExpression is a convenience function that returns UnaryExpression wrapped in Expression
func UnaryExpressionAsExpression(v *UnaryExpression) Expression {
	return Expression{
		UnaryExpression: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Expression) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AndOrExpression
	err = newStrictDecoder(data).Decode(&dst.AndOrExpression)
	if err == nil {
		jsonAndOrExpression, _ := json.Marshal(dst.AndOrExpression)
		if string(jsonAndOrExpression) == "{}" { // empty struct
			dst.AndOrExpression = nil
		} else {
			if err = validator.Validate(dst.AndOrExpression); err != nil {
				dst.AndOrExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.AndOrExpression = nil
	}

	// try to unmarshal data into FalseExpression
	err = newStrictDecoder(data).Decode(&dst.FalseExpression)
	if err == nil {
		jsonFalseExpression, _ := json.Marshal(dst.FalseExpression)
		if string(jsonFalseExpression) == "{}" { // empty struct
			dst.FalseExpression = nil
		} else {
			if err = validator.Validate(dst.FalseExpression); err != nil {
				dst.FalseExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.FalseExpression = nil
	}

	// try to unmarshal data into LiteralExpression
	err = newStrictDecoder(data).Decode(&dst.LiteralExpression)
	if err == nil {
		jsonLiteralExpression, _ := json.Marshal(dst.LiteralExpression)
		if string(jsonLiteralExpression) == "{}" { // empty struct
			dst.LiteralExpression = nil
		} else {
			if err = validator.Validate(dst.LiteralExpression); err != nil {
				dst.LiteralExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.LiteralExpression = nil
	}

	// try to unmarshal data into NotExpression
	err = newStrictDecoder(data).Decode(&dst.NotExpression)
	if err == nil {
		jsonNotExpression, _ := json.Marshal(dst.NotExpression)
		if string(jsonNotExpression) == "{}" { // empty struct
			dst.NotExpression = nil
		} else {
			if err = validator.Validate(dst.NotExpression); err != nil {
				dst.NotExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.NotExpression = nil
	}

	// try to unmarshal data into SetExpression
	err = newStrictDecoder(data).Decode(&dst.SetExpression)
	if err == nil {
		jsonSetExpression, _ := json.Marshal(dst.SetExpression)
		if string(jsonSetExpression) == "{}" { // empty struct
			dst.SetExpression = nil
		} else {
			if err = validator.Validate(dst.SetExpression); err != nil {
				dst.SetExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetExpression = nil
	}

	// try to unmarshal data into TrueExpression
	err = newStrictDecoder(data).Decode(&dst.TrueExpression)
	if err == nil {
		jsonTrueExpression, _ := json.Marshal(dst.TrueExpression)
		if string(jsonTrueExpression) == "{}" { // empty struct
			dst.TrueExpression = nil
		} else {
			if err = validator.Validate(dst.TrueExpression); err != nil {
				dst.TrueExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.TrueExpression = nil
	}

	// try to unmarshal data into UnaryExpression
	err = newStrictDecoder(data).Decode(&dst.UnaryExpression)
	if err == nil {
		jsonUnaryExpression, _ := json.Marshal(dst.UnaryExpression)
		if string(jsonUnaryExpression) == "{}" { // empty struct
			dst.UnaryExpression = nil
		} else {
			if err = validator.Validate(dst.UnaryExpression); err != nil {
				dst.UnaryExpression = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnaryExpression = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AndOrExpression = nil
		dst.FalseExpression = nil
		dst.LiteralExpression = nil
		dst.NotExpression = nil
		dst.SetExpression = nil
		dst.TrueExpression = nil
		dst.UnaryExpression = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Expression)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Expression)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Expression) MarshalJSON() ([]byte, error) {
	if src.AndOrExpression != nil {
		return json.Marshal(&src.AndOrExpression)
	}

	if src.FalseExpression != nil {
		return json.Marshal(&src.FalseExpression)
	}

	if src.LiteralExpression != nil {
		return json.Marshal(&src.LiteralExpression)
	}

	if src.NotExpression != nil {
		return json.Marshal(&src.NotExpression)
	}

	if src.SetExpression != nil {
		return json.Marshal(&src.SetExpression)
	}

	if src.TrueExpression != nil {
		return json.Marshal(&src.TrueExpression)
	}

	if src.UnaryExpression != nil {
		return json.Marshal(&src.UnaryExpression)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Expression) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AndOrExpression != nil {
		return obj.AndOrExpression
	}

	if obj.FalseExpression != nil {
		return obj.FalseExpression
	}

	if obj.LiteralExpression != nil {
		return obj.LiteralExpression
	}

	if obj.NotExpression != nil {
		return obj.NotExpression
	}

	if obj.SetExpression != nil {
		return obj.SetExpression
	}

	if obj.TrueExpression != nil {
		return obj.TrueExpression
	}

	if obj.UnaryExpression != nil {
		return obj.UnaryExpression
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Expression) GetActualInstanceValue() (interface{}) {
	if obj.AndOrExpression != nil {
		return *obj.AndOrExpression
	}

	if obj.FalseExpression != nil {
		return *obj.FalseExpression
	}

	if obj.LiteralExpression != nil {
		return *obj.LiteralExpression
	}

	if obj.NotExpression != nil {
		return *obj.NotExpression
	}

	if obj.SetExpression != nil {
		return *obj.SetExpression
	}

	if obj.TrueExpression != nil {
		return *obj.TrueExpression
	}

	if obj.UnaryExpression != nil {
		return *obj.UnaryExpression
	}

	// all schemas are nil
	return nil
}

type NullableExpression struct {
	value *Expression
	isSet bool
}

func (v NullableExpression) Get() *Expression {
	return v.value
}

func (v *NullableExpression) Set(val *Expression) {
	v.value = val
	v.isSet = true
}

func (v NullableExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpression(val *Expression) *NullableExpression {
	return &NullableExpression{value: val, isSet: true}
}

func (v NullableExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


