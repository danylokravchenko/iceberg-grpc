/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AndOrExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AndOrExpression{}

// AndOrExpression struct for AndOrExpression
type AndOrExpression struct {
	Type string `json:"type"`
	Left Expression `json:"left"`
	Right Expression `json:"right"`
}

type _AndOrExpression AndOrExpression

// NewAndOrExpression instantiates a new AndOrExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndOrExpression(type_ string, left Expression, right Expression) *AndOrExpression {
	this := AndOrExpression{}
	this.Type = type_
	this.Left = left
	this.Right = right
	return &this
}

// NewAndOrExpressionWithDefaults instantiates a new AndOrExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndOrExpressionWithDefaults() *AndOrExpression {
	this := AndOrExpression{}
	return &this
}

// GetType returns the Type field value
func (o *AndOrExpression) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AndOrExpression) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AndOrExpression) SetType(v string) {
	o.Type = v
}

// GetLeft returns the Left field value
func (o *AndOrExpression) GetLeft() Expression {
	if o == nil {
		var ret Expression
		return ret
	}

	return o.Left
}

// GetLeftOk returns a tuple with the Left field value
// and a boolean to check if the value has been set.
func (o *AndOrExpression) GetLeftOk() (*Expression, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Left, true
}

// SetLeft sets field value
func (o *AndOrExpression) SetLeft(v Expression) {
	o.Left = v
}

// GetRight returns the Right field value
func (o *AndOrExpression) GetRight() Expression {
	if o == nil {
		var ret Expression
		return ret
	}

	return o.Right
}

// GetRightOk returns a tuple with the Right field value
// and a boolean to check if the value has been set.
func (o *AndOrExpression) GetRightOk() (*Expression, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Right, true
}

// SetRight sets field value
func (o *AndOrExpression) SetRight(v Expression) {
	o.Right = v
}

func (o AndOrExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AndOrExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["left"] = o.Left
	toSerialize["right"] = o.Right
	return toSerialize, nil
}

func (o *AndOrExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"left",
		"right",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAndOrExpression := _AndOrExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAndOrExpression)

	if err != nil {
		return err
	}

	*o = AndOrExpression(varAndOrExpression)

	return err
}

type NullableAndOrExpression struct {
	value *AndOrExpression
	isSet bool
}

func (v NullableAndOrExpression) Get() *AndOrExpression {
	return v.value
}

func (v *NullableAndOrExpression) Set(val *AndOrExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableAndOrExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableAndOrExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndOrExpression(val *AndOrExpression) *NullableAndOrExpression {
	return &NullableAndOrExpression{value: val, isSet: true}
}

func (v NullableAndOrExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndOrExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


