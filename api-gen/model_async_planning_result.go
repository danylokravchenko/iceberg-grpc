/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AsyncPlanningResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncPlanningResult{}

// AsyncPlanningResult struct for AsyncPlanningResult
type AsyncPlanningResult struct {
	Status PlanStatus `json:"status"`
	// ID used to track a planning request
	PlanId *string `json:"plan-id,omitempty"`
}

type _AsyncPlanningResult AsyncPlanningResult

// NewAsyncPlanningResult instantiates a new AsyncPlanningResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncPlanningResult(status PlanStatus) *AsyncPlanningResult {
	this := AsyncPlanningResult{}
	this.Status = status
	return &this
}

// NewAsyncPlanningResultWithDefaults instantiates a new AsyncPlanningResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncPlanningResultWithDefaults() *AsyncPlanningResult {
	this := AsyncPlanningResult{}
	return &this
}

// GetStatus returns the Status field value
func (o *AsyncPlanningResult) GetStatus() PlanStatus {
	if o == nil {
		var ret PlanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AsyncPlanningResult) GetStatusOk() (*PlanStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AsyncPlanningResult) SetStatus(v PlanStatus) {
	o.Status = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *AsyncPlanningResult) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncPlanningResult) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *AsyncPlanningResult) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *AsyncPlanningResult) SetPlanId(v string) {
	o.PlanId = &v
}

func (o AsyncPlanningResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncPlanningResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.PlanId) {
		toSerialize["plan-id"] = o.PlanId
	}
	return toSerialize, nil
}

func (o *AsyncPlanningResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsyncPlanningResult := _AsyncPlanningResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAsyncPlanningResult)

	if err != nil {
		return err
	}

	*o = AsyncPlanningResult(varAsyncPlanningResult)

	return err
}

type NullableAsyncPlanningResult struct {
	value *AsyncPlanningResult
	isSet bool
}

func (v NullableAsyncPlanningResult) Get() *AsyncPlanningResult {
	return v.value
}

func (v *NullableAsyncPlanningResult) Set(val *AsyncPlanningResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncPlanningResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncPlanningResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncPlanningResult(val *AsyncPlanningResult) *NullableAsyncPlanningResult {
	return &NullableAsyncPlanningResult{value: val, isSet: true}
}

func (v NullableAsyncPlanningResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncPlanningResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


