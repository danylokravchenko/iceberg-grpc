/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewHistoryEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewHistoryEntry{}

// ViewHistoryEntry struct for ViewHistoryEntry
type ViewHistoryEntry struct {
	VersionId int32 `json:"version-id"`
	TimestampMs int64 `json:"timestamp-ms"`
}

type _ViewHistoryEntry ViewHistoryEntry

// NewViewHistoryEntry instantiates a new ViewHistoryEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewHistoryEntry(versionId int32, timestampMs int64) *ViewHistoryEntry {
	this := ViewHistoryEntry{}
	this.VersionId = versionId
	this.TimestampMs = timestampMs
	return &this
}

// NewViewHistoryEntryWithDefaults instantiates a new ViewHistoryEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewHistoryEntryWithDefaults() *ViewHistoryEntry {
	this := ViewHistoryEntry{}
	return &this
}

// GetVersionId returns the VersionId field value
func (o *ViewHistoryEntry) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *ViewHistoryEntry) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *ViewHistoryEntry) SetVersionId(v int32) {
	o.VersionId = v
}

// GetTimestampMs returns the TimestampMs field value
func (o *ViewHistoryEntry) GetTimestampMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimestampMs
}

// GetTimestampMsOk returns a tuple with the TimestampMs field value
// and a boolean to check if the value has been set.
func (o *ViewHistoryEntry) GetTimestampMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampMs, true
}

// SetTimestampMs sets field value
func (o *ViewHistoryEntry) SetTimestampMs(v int64) {
	o.TimestampMs = v
}

func (o ViewHistoryEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewHistoryEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version-id"] = o.VersionId
	toSerialize["timestamp-ms"] = o.TimestampMs
	return toSerialize, nil
}

func (o *ViewHistoryEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version-id",
		"timestamp-ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewHistoryEntry := _ViewHistoryEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewHistoryEntry)

	if err != nil {
		return err
	}

	*o = ViewHistoryEntry(varViewHistoryEntry)

	return err
}

type NullableViewHistoryEntry struct {
	value *ViewHistoryEntry
	isSet bool
}

func (v NullableViewHistoryEntry) Get() *ViewHistoryEntry {
	return v.value
}

func (v *NullableViewHistoryEntry) Set(val *ViewHistoryEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableViewHistoryEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableViewHistoryEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewHistoryEntry(val *ViewHistoryEntry) *NullableViewHistoryEntry {
	return &NullableViewHistoryEntry{value: val, isSet: true}
}

func (v NullableViewHistoryEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewHistoryEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


