/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
)

// checks if the TableUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableUpdate{}

// TableUpdate struct for TableUpdate
type TableUpdate struct {
	AddPartitionSpecUpdate *AddPartitionSpecUpdate
	AddSchemaUpdate *AddSchemaUpdate
	AddSnapshotUpdate *AddSnapshotUpdate
	AddSortOrderUpdate *AddSortOrderUpdate
	AssignUUIDUpdate *AssignUUIDUpdate
	EnableRowLineageUpdate *EnableRowLineageUpdate
	RemovePartitionSpecsUpdate *RemovePartitionSpecsUpdate
	RemovePropertiesUpdate *RemovePropertiesUpdate
	RemoveSchemasUpdate *RemoveSchemasUpdate
	RemoveSnapshotRefUpdate *RemoveSnapshotRefUpdate
	RemoveSnapshotsUpdate *RemoveSnapshotsUpdate
	RemoveStatisticsUpdate *RemoveStatisticsUpdate
	SetCurrentSchemaUpdate *SetCurrentSchemaUpdate
	SetDefaultSortOrderUpdate *SetDefaultSortOrderUpdate
	SetDefaultSpecUpdate *SetDefaultSpecUpdate
	SetLocationUpdate *SetLocationUpdate
	SetPropertiesUpdate *SetPropertiesUpdate
	SetSnapshotRefUpdate *SetSnapshotRefUpdate
	SetStatisticsUpdate *SetStatisticsUpdate
	UpgradeFormatVersionUpdate *UpgradeFormatVersionUpdate
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TableUpdate) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'add-schema'
	if jsonDict["action"] == "add-schema" {
		// try to unmarshal JSON data into AddSchemaUpdate
		err = json.Unmarshal(data, &dst.AddSchemaUpdate);
		if err == nil {
			jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
			if string(jsonAddSchemaUpdate) == "{}" { // empty struct
				dst.AddSchemaUpdate = nil
			} else {
				return nil // data stored in dst.AddSchemaUpdate, return on the first match
			}
		} else {
			dst.AddSchemaUpdate = nil
		}
	}

	// check if the discriminator value is 'add-snapshot'
	if jsonDict["action"] == "add-snapshot" {
		// try to unmarshal JSON data into AddSnapshotUpdate
		err = json.Unmarshal(data, &dst.AddSnapshotUpdate);
		if err == nil {
			jsonAddSnapshotUpdate, _ := json.Marshal(dst.AddSnapshotUpdate)
			if string(jsonAddSnapshotUpdate) == "{}" { // empty struct
				dst.AddSnapshotUpdate = nil
			} else {
				return nil // data stored in dst.AddSnapshotUpdate, return on the first match
			}
		} else {
			dst.AddSnapshotUpdate = nil
		}
	}

	// check if the discriminator value is 'add-sort-order'
	if jsonDict["action"] == "add-sort-order" {
		// try to unmarshal JSON data into AddSortOrderUpdate
		err = json.Unmarshal(data, &dst.AddSortOrderUpdate);
		if err == nil {
			jsonAddSortOrderUpdate, _ := json.Marshal(dst.AddSortOrderUpdate)
			if string(jsonAddSortOrderUpdate) == "{}" { // empty struct
				dst.AddSortOrderUpdate = nil
			} else {
				return nil // data stored in dst.AddSortOrderUpdate, return on the first match
			}
		} else {
			dst.AddSortOrderUpdate = nil
		}
	}

	// check if the discriminator value is 'add-spec'
	if jsonDict["action"] == "add-spec" {
		// try to unmarshal JSON data into AddPartitionSpecUpdate
		err = json.Unmarshal(data, &dst.AddPartitionSpecUpdate);
		if err == nil {
			jsonAddPartitionSpecUpdate, _ := json.Marshal(dst.AddPartitionSpecUpdate)
			if string(jsonAddPartitionSpecUpdate) == "{}" { // empty struct
				dst.AddPartitionSpecUpdate = nil
			} else {
				return nil // data stored in dst.AddPartitionSpecUpdate, return on the first match
			}
		} else {
			dst.AddPartitionSpecUpdate = nil
		}
	}

	// check if the discriminator value is 'assign-uuid'
	if jsonDict["action"] == "assign-uuid" {
		// try to unmarshal JSON data into AssignUUIDUpdate
		err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
		if err == nil {
			jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
			if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
				dst.AssignUUIDUpdate = nil
			} else {
				return nil // data stored in dst.AssignUUIDUpdate, return on the first match
			}
		} else {
			dst.AssignUUIDUpdate = nil
		}
	}

	// check if the discriminator value is 'enable-row-lineage'
	if jsonDict["action"] == "enable-row-lineage" {
		// try to unmarshal JSON data into EnableRowLineageUpdate
		err = json.Unmarshal(data, &dst.EnableRowLineageUpdate);
		if err == nil {
			jsonEnableRowLineageUpdate, _ := json.Marshal(dst.EnableRowLineageUpdate)
			if string(jsonEnableRowLineageUpdate) == "{}" { // empty struct
				dst.EnableRowLineageUpdate = nil
			} else {
				return nil // data stored in dst.EnableRowLineageUpdate, return on the first match
			}
		} else {
			dst.EnableRowLineageUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-partition-specs'
	if jsonDict["action"] == "remove-partition-specs" {
		// try to unmarshal JSON data into RemovePartitionSpecsUpdate
		err = json.Unmarshal(data, &dst.RemovePartitionSpecsUpdate);
		if err == nil {
			jsonRemovePartitionSpecsUpdate, _ := json.Marshal(dst.RemovePartitionSpecsUpdate)
			if string(jsonRemovePartitionSpecsUpdate) == "{}" { // empty struct
				dst.RemovePartitionSpecsUpdate = nil
			} else {
				return nil // data stored in dst.RemovePartitionSpecsUpdate, return on the first match
			}
		} else {
			dst.RemovePartitionSpecsUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-properties'
	if jsonDict["action"] == "remove-properties" {
		// try to unmarshal JSON data into RemovePropertiesUpdate
		err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
		if err == nil {
			jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
			if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
				dst.RemovePropertiesUpdate = nil
			} else {
				return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
			}
		} else {
			dst.RemovePropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-schemas'
	if jsonDict["action"] == "remove-schemas" {
		// try to unmarshal JSON data into RemoveSchemasUpdate
		err = json.Unmarshal(data, &dst.RemoveSchemasUpdate);
		if err == nil {
			jsonRemoveSchemasUpdate, _ := json.Marshal(dst.RemoveSchemasUpdate)
			if string(jsonRemoveSchemasUpdate) == "{}" { // empty struct
				dst.RemoveSchemasUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSchemasUpdate, return on the first match
			}
		} else {
			dst.RemoveSchemasUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-snapshot-ref'
	if jsonDict["action"] == "remove-snapshot-ref" {
		// try to unmarshal JSON data into RemoveSnapshotRefUpdate
		err = json.Unmarshal(data, &dst.RemoveSnapshotRefUpdate);
		if err == nil {
			jsonRemoveSnapshotRefUpdate, _ := json.Marshal(dst.RemoveSnapshotRefUpdate)
			if string(jsonRemoveSnapshotRefUpdate) == "{}" { // empty struct
				dst.RemoveSnapshotRefUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSnapshotRefUpdate, return on the first match
			}
		} else {
			dst.RemoveSnapshotRefUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-snapshots'
	if jsonDict["action"] == "remove-snapshots" {
		// try to unmarshal JSON data into RemoveSnapshotsUpdate
		err = json.Unmarshal(data, &dst.RemoveSnapshotsUpdate);
		if err == nil {
			jsonRemoveSnapshotsUpdate, _ := json.Marshal(dst.RemoveSnapshotsUpdate)
			if string(jsonRemoveSnapshotsUpdate) == "{}" { // empty struct
				dst.RemoveSnapshotsUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSnapshotsUpdate, return on the first match
			}
		} else {
			dst.RemoveSnapshotsUpdate = nil
		}
	}

	// check if the discriminator value is 'remove-statistics'
	if jsonDict["action"] == "remove-statistics" {
		// try to unmarshal JSON data into RemoveStatisticsUpdate
		err = json.Unmarshal(data, &dst.RemoveStatisticsUpdate);
		if err == nil {
			jsonRemoveStatisticsUpdate, _ := json.Marshal(dst.RemoveStatisticsUpdate)
			if string(jsonRemoveStatisticsUpdate) == "{}" { // empty struct
				dst.RemoveStatisticsUpdate = nil
			} else {
				return nil // data stored in dst.RemoveStatisticsUpdate, return on the first match
			}
		} else {
			dst.RemoveStatisticsUpdate = nil
		}
	}

	// check if the discriminator value is 'set-current-schema'
	if jsonDict["action"] == "set-current-schema" {
		// try to unmarshal JSON data into SetCurrentSchemaUpdate
		err = json.Unmarshal(data, &dst.SetCurrentSchemaUpdate);
		if err == nil {
			jsonSetCurrentSchemaUpdate, _ := json.Marshal(dst.SetCurrentSchemaUpdate)
			if string(jsonSetCurrentSchemaUpdate) == "{}" { // empty struct
				dst.SetCurrentSchemaUpdate = nil
			} else {
				return nil // data stored in dst.SetCurrentSchemaUpdate, return on the first match
			}
		} else {
			dst.SetCurrentSchemaUpdate = nil
		}
	}

	// check if the discriminator value is 'set-default-sort-order'
	if jsonDict["action"] == "set-default-sort-order" {
		// try to unmarshal JSON data into SetDefaultSortOrderUpdate
		err = json.Unmarshal(data, &dst.SetDefaultSortOrderUpdate);
		if err == nil {
			jsonSetDefaultSortOrderUpdate, _ := json.Marshal(dst.SetDefaultSortOrderUpdate)
			if string(jsonSetDefaultSortOrderUpdate) == "{}" { // empty struct
				dst.SetDefaultSortOrderUpdate = nil
			} else {
				return nil // data stored in dst.SetDefaultSortOrderUpdate, return on the first match
			}
		} else {
			dst.SetDefaultSortOrderUpdate = nil
		}
	}

	// check if the discriminator value is 'set-default-spec'
	if jsonDict["action"] == "set-default-spec" {
		// try to unmarshal JSON data into SetDefaultSpecUpdate
		err = json.Unmarshal(data, &dst.SetDefaultSpecUpdate);
		if err == nil {
			jsonSetDefaultSpecUpdate, _ := json.Marshal(dst.SetDefaultSpecUpdate)
			if string(jsonSetDefaultSpecUpdate) == "{}" { // empty struct
				dst.SetDefaultSpecUpdate = nil
			} else {
				return nil // data stored in dst.SetDefaultSpecUpdate, return on the first match
			}
		} else {
			dst.SetDefaultSpecUpdate = nil
		}
	}

	// check if the discriminator value is 'set-location'
	if jsonDict["action"] == "set-location" {
		// try to unmarshal JSON data into SetLocationUpdate
		err = json.Unmarshal(data, &dst.SetLocationUpdate);
		if err == nil {
			jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
			if string(jsonSetLocationUpdate) == "{}" { // empty struct
				dst.SetLocationUpdate = nil
			} else {
				return nil // data stored in dst.SetLocationUpdate, return on the first match
			}
		} else {
			dst.SetLocationUpdate = nil
		}
	}

	// check if the discriminator value is 'set-properties'
	if jsonDict["action"] == "set-properties" {
		// try to unmarshal JSON data into SetPropertiesUpdate
		err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
		if err == nil {
			jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
			if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
				dst.SetPropertiesUpdate = nil
			} else {
				return nil // data stored in dst.SetPropertiesUpdate, return on the first match
			}
		} else {
			dst.SetPropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'set-snapshot-ref'
	if jsonDict["action"] == "set-snapshot-ref" {
		// try to unmarshal JSON data into SetSnapshotRefUpdate
		err = json.Unmarshal(data, &dst.SetSnapshotRefUpdate);
		if err == nil {
			jsonSetSnapshotRefUpdate, _ := json.Marshal(dst.SetSnapshotRefUpdate)
			if string(jsonSetSnapshotRefUpdate) == "{}" { // empty struct
				dst.SetSnapshotRefUpdate = nil
			} else {
				return nil // data stored in dst.SetSnapshotRefUpdate, return on the first match
			}
		} else {
			dst.SetSnapshotRefUpdate = nil
		}
	}

	// check if the discriminator value is 'set-statistics'
	if jsonDict["action"] == "set-statistics" {
		// try to unmarshal JSON data into SetStatisticsUpdate
		err = json.Unmarshal(data, &dst.SetStatisticsUpdate);
		if err == nil {
			jsonSetStatisticsUpdate, _ := json.Marshal(dst.SetStatisticsUpdate)
			if string(jsonSetStatisticsUpdate) == "{}" { // empty struct
				dst.SetStatisticsUpdate = nil
			} else {
				return nil // data stored in dst.SetStatisticsUpdate, return on the first match
			}
		} else {
			dst.SetStatisticsUpdate = nil
		}
	}

	// check if the discriminator value is 'upgrade-format-version'
	if jsonDict["action"] == "upgrade-format-version" {
		// try to unmarshal JSON data into UpgradeFormatVersionUpdate
		err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
		if err == nil {
			jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
			if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
				dst.UpgradeFormatVersionUpdate = nil
			} else {
				return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
			}
		} else {
			dst.UpgradeFormatVersionUpdate = nil
		}
	}

	// check if the discriminator value is 'AddPartitionSpecUpdate'
	if jsonDict["action"] == "AddPartitionSpecUpdate" {
		// try to unmarshal JSON data into AddPartitionSpecUpdate
		err = json.Unmarshal(data, &dst.AddPartitionSpecUpdate);
		if err == nil {
			jsonAddPartitionSpecUpdate, _ := json.Marshal(dst.AddPartitionSpecUpdate)
			if string(jsonAddPartitionSpecUpdate) == "{}" { // empty struct
				dst.AddPartitionSpecUpdate = nil
			} else {
				return nil // data stored in dst.AddPartitionSpecUpdate, return on the first match
			}
		} else {
			dst.AddPartitionSpecUpdate = nil
		}
	}

	// check if the discriminator value is 'AddSchemaUpdate'
	if jsonDict["action"] == "AddSchemaUpdate" {
		// try to unmarshal JSON data into AddSchemaUpdate
		err = json.Unmarshal(data, &dst.AddSchemaUpdate);
		if err == nil {
			jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
			if string(jsonAddSchemaUpdate) == "{}" { // empty struct
				dst.AddSchemaUpdate = nil
			} else {
				return nil // data stored in dst.AddSchemaUpdate, return on the first match
			}
		} else {
			dst.AddSchemaUpdate = nil
		}
	}

	// check if the discriminator value is 'AddSnapshotUpdate'
	if jsonDict["action"] == "AddSnapshotUpdate" {
		// try to unmarshal JSON data into AddSnapshotUpdate
		err = json.Unmarshal(data, &dst.AddSnapshotUpdate);
		if err == nil {
			jsonAddSnapshotUpdate, _ := json.Marshal(dst.AddSnapshotUpdate)
			if string(jsonAddSnapshotUpdate) == "{}" { // empty struct
				dst.AddSnapshotUpdate = nil
			} else {
				return nil // data stored in dst.AddSnapshotUpdate, return on the first match
			}
		} else {
			dst.AddSnapshotUpdate = nil
		}
	}

	// check if the discriminator value is 'AddSortOrderUpdate'
	if jsonDict["action"] == "AddSortOrderUpdate" {
		// try to unmarshal JSON data into AddSortOrderUpdate
		err = json.Unmarshal(data, &dst.AddSortOrderUpdate);
		if err == nil {
			jsonAddSortOrderUpdate, _ := json.Marshal(dst.AddSortOrderUpdate)
			if string(jsonAddSortOrderUpdate) == "{}" { // empty struct
				dst.AddSortOrderUpdate = nil
			} else {
				return nil // data stored in dst.AddSortOrderUpdate, return on the first match
			}
		} else {
			dst.AddSortOrderUpdate = nil
		}
	}

	// check if the discriminator value is 'AssignUUIDUpdate'
	if jsonDict["action"] == "AssignUUIDUpdate" {
		// try to unmarshal JSON data into AssignUUIDUpdate
		err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
		if err == nil {
			jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
			if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
				dst.AssignUUIDUpdate = nil
			} else {
				return nil // data stored in dst.AssignUUIDUpdate, return on the first match
			}
		} else {
			dst.AssignUUIDUpdate = nil
		}
	}

	// check if the discriminator value is 'EnableRowLineageUpdate'
	if jsonDict["action"] == "EnableRowLineageUpdate" {
		// try to unmarshal JSON data into EnableRowLineageUpdate
		err = json.Unmarshal(data, &dst.EnableRowLineageUpdate);
		if err == nil {
			jsonEnableRowLineageUpdate, _ := json.Marshal(dst.EnableRowLineageUpdate)
			if string(jsonEnableRowLineageUpdate) == "{}" { // empty struct
				dst.EnableRowLineageUpdate = nil
			} else {
				return nil // data stored in dst.EnableRowLineageUpdate, return on the first match
			}
		} else {
			dst.EnableRowLineageUpdate = nil
		}
	}

	// check if the discriminator value is 'RemovePartitionSpecsUpdate'
	if jsonDict["action"] == "RemovePartitionSpecsUpdate" {
		// try to unmarshal JSON data into RemovePartitionSpecsUpdate
		err = json.Unmarshal(data, &dst.RemovePartitionSpecsUpdate);
		if err == nil {
			jsonRemovePartitionSpecsUpdate, _ := json.Marshal(dst.RemovePartitionSpecsUpdate)
			if string(jsonRemovePartitionSpecsUpdate) == "{}" { // empty struct
				dst.RemovePartitionSpecsUpdate = nil
			} else {
				return nil // data stored in dst.RemovePartitionSpecsUpdate, return on the first match
			}
		} else {
			dst.RemovePartitionSpecsUpdate = nil
		}
	}

	// check if the discriminator value is 'RemovePropertiesUpdate'
	if jsonDict["action"] == "RemovePropertiesUpdate" {
		// try to unmarshal JSON data into RemovePropertiesUpdate
		err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
		if err == nil {
			jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
			if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
				dst.RemovePropertiesUpdate = nil
			} else {
				return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
			}
		} else {
			dst.RemovePropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'RemoveSchemasUpdate'
	if jsonDict["action"] == "RemoveSchemasUpdate" {
		// try to unmarshal JSON data into RemoveSchemasUpdate
		err = json.Unmarshal(data, &dst.RemoveSchemasUpdate);
		if err == nil {
			jsonRemoveSchemasUpdate, _ := json.Marshal(dst.RemoveSchemasUpdate)
			if string(jsonRemoveSchemasUpdate) == "{}" { // empty struct
				dst.RemoveSchemasUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSchemasUpdate, return on the first match
			}
		} else {
			dst.RemoveSchemasUpdate = nil
		}
	}

	// check if the discriminator value is 'RemoveSnapshotRefUpdate'
	if jsonDict["action"] == "RemoveSnapshotRefUpdate" {
		// try to unmarshal JSON data into RemoveSnapshotRefUpdate
		err = json.Unmarshal(data, &dst.RemoveSnapshotRefUpdate);
		if err == nil {
			jsonRemoveSnapshotRefUpdate, _ := json.Marshal(dst.RemoveSnapshotRefUpdate)
			if string(jsonRemoveSnapshotRefUpdate) == "{}" { // empty struct
				dst.RemoveSnapshotRefUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSnapshotRefUpdate, return on the first match
			}
		} else {
			dst.RemoveSnapshotRefUpdate = nil
		}
	}

	// check if the discriminator value is 'RemoveSnapshotsUpdate'
	if jsonDict["action"] == "RemoveSnapshotsUpdate" {
		// try to unmarshal JSON data into RemoveSnapshotsUpdate
		err = json.Unmarshal(data, &dst.RemoveSnapshotsUpdate);
		if err == nil {
			jsonRemoveSnapshotsUpdate, _ := json.Marshal(dst.RemoveSnapshotsUpdate)
			if string(jsonRemoveSnapshotsUpdate) == "{}" { // empty struct
				dst.RemoveSnapshotsUpdate = nil
			} else {
				return nil // data stored in dst.RemoveSnapshotsUpdate, return on the first match
			}
		} else {
			dst.RemoveSnapshotsUpdate = nil
		}
	}

	// check if the discriminator value is 'RemoveStatisticsUpdate'
	if jsonDict["action"] == "RemoveStatisticsUpdate" {
		// try to unmarshal JSON data into RemoveStatisticsUpdate
		err = json.Unmarshal(data, &dst.RemoveStatisticsUpdate);
		if err == nil {
			jsonRemoveStatisticsUpdate, _ := json.Marshal(dst.RemoveStatisticsUpdate)
			if string(jsonRemoveStatisticsUpdate) == "{}" { // empty struct
				dst.RemoveStatisticsUpdate = nil
			} else {
				return nil // data stored in dst.RemoveStatisticsUpdate, return on the first match
			}
		} else {
			dst.RemoveStatisticsUpdate = nil
		}
	}

	// check if the discriminator value is 'SetCurrentSchemaUpdate'
	if jsonDict["action"] == "SetCurrentSchemaUpdate" {
		// try to unmarshal JSON data into SetCurrentSchemaUpdate
		err = json.Unmarshal(data, &dst.SetCurrentSchemaUpdate);
		if err == nil {
			jsonSetCurrentSchemaUpdate, _ := json.Marshal(dst.SetCurrentSchemaUpdate)
			if string(jsonSetCurrentSchemaUpdate) == "{}" { // empty struct
				dst.SetCurrentSchemaUpdate = nil
			} else {
				return nil // data stored in dst.SetCurrentSchemaUpdate, return on the first match
			}
		} else {
			dst.SetCurrentSchemaUpdate = nil
		}
	}

	// check if the discriminator value is 'SetDefaultSortOrderUpdate'
	if jsonDict["action"] == "SetDefaultSortOrderUpdate" {
		// try to unmarshal JSON data into SetDefaultSortOrderUpdate
		err = json.Unmarshal(data, &dst.SetDefaultSortOrderUpdate);
		if err == nil {
			jsonSetDefaultSortOrderUpdate, _ := json.Marshal(dst.SetDefaultSortOrderUpdate)
			if string(jsonSetDefaultSortOrderUpdate) == "{}" { // empty struct
				dst.SetDefaultSortOrderUpdate = nil
			} else {
				return nil // data stored in dst.SetDefaultSortOrderUpdate, return on the first match
			}
		} else {
			dst.SetDefaultSortOrderUpdate = nil
		}
	}

	// check if the discriminator value is 'SetDefaultSpecUpdate'
	if jsonDict["action"] == "SetDefaultSpecUpdate" {
		// try to unmarshal JSON data into SetDefaultSpecUpdate
		err = json.Unmarshal(data, &dst.SetDefaultSpecUpdate);
		if err == nil {
			jsonSetDefaultSpecUpdate, _ := json.Marshal(dst.SetDefaultSpecUpdate)
			if string(jsonSetDefaultSpecUpdate) == "{}" { // empty struct
				dst.SetDefaultSpecUpdate = nil
			} else {
				return nil // data stored in dst.SetDefaultSpecUpdate, return on the first match
			}
		} else {
			dst.SetDefaultSpecUpdate = nil
		}
	}

	// check if the discriminator value is 'SetLocationUpdate'
	if jsonDict["action"] == "SetLocationUpdate" {
		// try to unmarshal JSON data into SetLocationUpdate
		err = json.Unmarshal(data, &dst.SetLocationUpdate);
		if err == nil {
			jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
			if string(jsonSetLocationUpdate) == "{}" { // empty struct
				dst.SetLocationUpdate = nil
			} else {
				return nil // data stored in dst.SetLocationUpdate, return on the first match
			}
		} else {
			dst.SetLocationUpdate = nil
		}
	}

	// check if the discriminator value is 'SetPropertiesUpdate'
	if jsonDict["action"] == "SetPropertiesUpdate" {
		// try to unmarshal JSON data into SetPropertiesUpdate
		err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
		if err == nil {
			jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
			if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
				dst.SetPropertiesUpdate = nil
			} else {
				return nil // data stored in dst.SetPropertiesUpdate, return on the first match
			}
		} else {
			dst.SetPropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'SetSnapshotRefUpdate'
	if jsonDict["action"] == "SetSnapshotRefUpdate" {
		// try to unmarshal JSON data into SetSnapshotRefUpdate
		err = json.Unmarshal(data, &dst.SetSnapshotRefUpdate);
		if err == nil {
			jsonSetSnapshotRefUpdate, _ := json.Marshal(dst.SetSnapshotRefUpdate)
			if string(jsonSetSnapshotRefUpdate) == "{}" { // empty struct
				dst.SetSnapshotRefUpdate = nil
			} else {
				return nil // data stored in dst.SetSnapshotRefUpdate, return on the first match
			}
		} else {
			dst.SetSnapshotRefUpdate = nil
		}
	}

	// check if the discriminator value is 'SetStatisticsUpdate'
	if jsonDict["action"] == "SetStatisticsUpdate" {
		// try to unmarshal JSON data into SetStatisticsUpdate
		err = json.Unmarshal(data, &dst.SetStatisticsUpdate);
		if err == nil {
			jsonSetStatisticsUpdate, _ := json.Marshal(dst.SetStatisticsUpdate)
			if string(jsonSetStatisticsUpdate) == "{}" { // empty struct
				dst.SetStatisticsUpdate = nil
			} else {
				return nil // data stored in dst.SetStatisticsUpdate, return on the first match
			}
		} else {
			dst.SetStatisticsUpdate = nil
		}
	}

	// check if the discriminator value is 'UpgradeFormatVersionUpdate'
	if jsonDict["action"] == "UpgradeFormatVersionUpdate" {
		// try to unmarshal JSON data into UpgradeFormatVersionUpdate
		err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
		if err == nil {
			jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
			if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
				dst.UpgradeFormatVersionUpdate = nil
			} else {
				return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
			}
		} else {
			dst.UpgradeFormatVersionUpdate = nil
		}
	}

	// try to unmarshal JSON data into AddPartitionSpecUpdate
	err = json.Unmarshal(data, &dst.AddPartitionSpecUpdate);
	if err == nil {
		jsonAddPartitionSpecUpdate, _ := json.Marshal(dst.AddPartitionSpecUpdate)
		if string(jsonAddPartitionSpecUpdate) == "{}" { // empty struct
			dst.AddPartitionSpecUpdate = nil
		} else {
			return nil // data stored in dst.AddPartitionSpecUpdate, return on the first match
		}
	} else {
		dst.AddPartitionSpecUpdate = nil
	}

	// try to unmarshal JSON data into AddSchemaUpdate
	err = json.Unmarshal(data, &dst.AddSchemaUpdate);
	if err == nil {
		jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
		if string(jsonAddSchemaUpdate) == "{}" { // empty struct
			dst.AddSchemaUpdate = nil
		} else {
			return nil // data stored in dst.AddSchemaUpdate, return on the first match
		}
	} else {
		dst.AddSchemaUpdate = nil
	}

	// try to unmarshal JSON data into AddSnapshotUpdate
	err = json.Unmarshal(data, &dst.AddSnapshotUpdate);
	if err == nil {
		jsonAddSnapshotUpdate, _ := json.Marshal(dst.AddSnapshotUpdate)
		if string(jsonAddSnapshotUpdate) == "{}" { // empty struct
			dst.AddSnapshotUpdate = nil
		} else {
			return nil // data stored in dst.AddSnapshotUpdate, return on the first match
		}
	} else {
		dst.AddSnapshotUpdate = nil
	}

	// try to unmarshal JSON data into AddSortOrderUpdate
	err = json.Unmarshal(data, &dst.AddSortOrderUpdate);
	if err == nil {
		jsonAddSortOrderUpdate, _ := json.Marshal(dst.AddSortOrderUpdate)
		if string(jsonAddSortOrderUpdate) == "{}" { // empty struct
			dst.AddSortOrderUpdate = nil
		} else {
			return nil // data stored in dst.AddSortOrderUpdate, return on the first match
		}
	} else {
		dst.AddSortOrderUpdate = nil
	}

	// try to unmarshal JSON data into AssignUUIDUpdate
	err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
	if err == nil {
		jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
		if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
			dst.AssignUUIDUpdate = nil
		} else {
			return nil // data stored in dst.AssignUUIDUpdate, return on the first match
		}
	} else {
		dst.AssignUUIDUpdate = nil
	}

	// try to unmarshal JSON data into EnableRowLineageUpdate
	err = json.Unmarshal(data, &dst.EnableRowLineageUpdate);
	if err == nil {
		jsonEnableRowLineageUpdate, _ := json.Marshal(dst.EnableRowLineageUpdate)
		if string(jsonEnableRowLineageUpdate) == "{}" { // empty struct
			dst.EnableRowLineageUpdate = nil
		} else {
			return nil // data stored in dst.EnableRowLineageUpdate, return on the first match
		}
	} else {
		dst.EnableRowLineageUpdate = nil
	}

	// try to unmarshal JSON data into RemovePartitionSpecsUpdate
	err = json.Unmarshal(data, &dst.RemovePartitionSpecsUpdate);
	if err == nil {
		jsonRemovePartitionSpecsUpdate, _ := json.Marshal(dst.RemovePartitionSpecsUpdate)
		if string(jsonRemovePartitionSpecsUpdate) == "{}" { // empty struct
			dst.RemovePartitionSpecsUpdate = nil
		} else {
			return nil // data stored in dst.RemovePartitionSpecsUpdate, return on the first match
		}
	} else {
		dst.RemovePartitionSpecsUpdate = nil
	}

	// try to unmarshal JSON data into RemovePropertiesUpdate
	err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
	if err == nil {
		jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
		if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
			dst.RemovePropertiesUpdate = nil
		} else {
			return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
		}
	} else {
		dst.RemovePropertiesUpdate = nil
	}

	// try to unmarshal JSON data into RemoveSchemasUpdate
	err = json.Unmarshal(data, &dst.RemoveSchemasUpdate);
	if err == nil {
		jsonRemoveSchemasUpdate, _ := json.Marshal(dst.RemoveSchemasUpdate)
		if string(jsonRemoveSchemasUpdate) == "{}" { // empty struct
			dst.RemoveSchemasUpdate = nil
		} else {
			return nil // data stored in dst.RemoveSchemasUpdate, return on the first match
		}
	} else {
		dst.RemoveSchemasUpdate = nil
	}

	// try to unmarshal JSON data into RemoveSnapshotRefUpdate
	err = json.Unmarshal(data, &dst.RemoveSnapshotRefUpdate);
	if err == nil {
		jsonRemoveSnapshotRefUpdate, _ := json.Marshal(dst.RemoveSnapshotRefUpdate)
		if string(jsonRemoveSnapshotRefUpdate) == "{}" { // empty struct
			dst.RemoveSnapshotRefUpdate = nil
		} else {
			return nil // data stored in dst.RemoveSnapshotRefUpdate, return on the first match
		}
	} else {
		dst.RemoveSnapshotRefUpdate = nil
	}

	// try to unmarshal JSON data into RemoveSnapshotsUpdate
	err = json.Unmarshal(data, &dst.RemoveSnapshotsUpdate);
	if err == nil {
		jsonRemoveSnapshotsUpdate, _ := json.Marshal(dst.RemoveSnapshotsUpdate)
		if string(jsonRemoveSnapshotsUpdate) == "{}" { // empty struct
			dst.RemoveSnapshotsUpdate = nil
		} else {
			return nil // data stored in dst.RemoveSnapshotsUpdate, return on the first match
		}
	} else {
		dst.RemoveSnapshotsUpdate = nil
	}

	// try to unmarshal JSON data into RemoveStatisticsUpdate
	err = json.Unmarshal(data, &dst.RemoveStatisticsUpdate);
	if err == nil {
		jsonRemoveStatisticsUpdate, _ := json.Marshal(dst.RemoveStatisticsUpdate)
		if string(jsonRemoveStatisticsUpdate) == "{}" { // empty struct
			dst.RemoveStatisticsUpdate = nil
		} else {
			return nil // data stored in dst.RemoveStatisticsUpdate, return on the first match
		}
	} else {
		dst.RemoveStatisticsUpdate = nil
	}

	// try to unmarshal JSON data into SetCurrentSchemaUpdate
	err = json.Unmarshal(data, &dst.SetCurrentSchemaUpdate);
	if err == nil {
		jsonSetCurrentSchemaUpdate, _ := json.Marshal(dst.SetCurrentSchemaUpdate)
		if string(jsonSetCurrentSchemaUpdate) == "{}" { // empty struct
			dst.SetCurrentSchemaUpdate = nil
		} else {
			return nil // data stored in dst.SetCurrentSchemaUpdate, return on the first match
		}
	} else {
		dst.SetCurrentSchemaUpdate = nil
	}

	// try to unmarshal JSON data into SetDefaultSortOrderUpdate
	err = json.Unmarshal(data, &dst.SetDefaultSortOrderUpdate);
	if err == nil {
		jsonSetDefaultSortOrderUpdate, _ := json.Marshal(dst.SetDefaultSortOrderUpdate)
		if string(jsonSetDefaultSortOrderUpdate) == "{}" { // empty struct
			dst.SetDefaultSortOrderUpdate = nil
		} else {
			return nil // data stored in dst.SetDefaultSortOrderUpdate, return on the first match
		}
	} else {
		dst.SetDefaultSortOrderUpdate = nil
	}

	// try to unmarshal JSON data into SetDefaultSpecUpdate
	err = json.Unmarshal(data, &dst.SetDefaultSpecUpdate);
	if err == nil {
		jsonSetDefaultSpecUpdate, _ := json.Marshal(dst.SetDefaultSpecUpdate)
		if string(jsonSetDefaultSpecUpdate) == "{}" { // empty struct
			dst.SetDefaultSpecUpdate = nil
		} else {
			return nil // data stored in dst.SetDefaultSpecUpdate, return on the first match
		}
	} else {
		dst.SetDefaultSpecUpdate = nil
	}

	// try to unmarshal JSON data into SetLocationUpdate
	err = json.Unmarshal(data, &dst.SetLocationUpdate);
	if err == nil {
		jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
		if string(jsonSetLocationUpdate) == "{}" { // empty struct
			dst.SetLocationUpdate = nil
		} else {
			return nil // data stored in dst.SetLocationUpdate, return on the first match
		}
	} else {
		dst.SetLocationUpdate = nil
	}

	// try to unmarshal JSON data into SetPropertiesUpdate
	err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
	if err == nil {
		jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
		if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
			dst.SetPropertiesUpdate = nil
		} else {
			return nil // data stored in dst.SetPropertiesUpdate, return on the first match
		}
	} else {
		dst.SetPropertiesUpdate = nil
	}

	// try to unmarshal JSON data into SetSnapshotRefUpdate
	err = json.Unmarshal(data, &dst.SetSnapshotRefUpdate);
	if err == nil {
		jsonSetSnapshotRefUpdate, _ := json.Marshal(dst.SetSnapshotRefUpdate)
		if string(jsonSetSnapshotRefUpdate) == "{}" { // empty struct
			dst.SetSnapshotRefUpdate = nil
		} else {
			return nil // data stored in dst.SetSnapshotRefUpdate, return on the first match
		}
	} else {
		dst.SetSnapshotRefUpdate = nil
	}

	// try to unmarshal JSON data into SetStatisticsUpdate
	err = json.Unmarshal(data, &dst.SetStatisticsUpdate);
	if err == nil {
		jsonSetStatisticsUpdate, _ := json.Marshal(dst.SetStatisticsUpdate)
		if string(jsonSetStatisticsUpdate) == "{}" { // empty struct
			dst.SetStatisticsUpdate = nil
		} else {
			return nil // data stored in dst.SetStatisticsUpdate, return on the first match
		}
	} else {
		dst.SetStatisticsUpdate = nil
	}

	// try to unmarshal JSON data into UpgradeFormatVersionUpdate
	err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
	if err == nil {
		jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
		if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
			dst.UpgradeFormatVersionUpdate = nil
		} else {
			return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
		}
	} else {
		dst.UpgradeFormatVersionUpdate = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TableUpdate)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TableUpdate) MarshalJSON() ([]byte, error) {
	if src.AddPartitionSpecUpdate != nil {
		return json.Marshal(&src.AddPartitionSpecUpdate)
	}

	if src.AddSchemaUpdate != nil {
		return json.Marshal(&src.AddSchemaUpdate)
	}

	if src.AddSnapshotUpdate != nil {
		return json.Marshal(&src.AddSnapshotUpdate)
	}

	if src.AddSortOrderUpdate != nil {
		return json.Marshal(&src.AddSortOrderUpdate)
	}

	if src.AssignUUIDUpdate != nil {
		return json.Marshal(&src.AssignUUIDUpdate)
	}

	if src.EnableRowLineageUpdate != nil {
		return json.Marshal(&src.EnableRowLineageUpdate)
	}

	if src.RemovePartitionSpecsUpdate != nil {
		return json.Marshal(&src.RemovePartitionSpecsUpdate)
	}

	if src.RemovePropertiesUpdate != nil {
		return json.Marshal(&src.RemovePropertiesUpdate)
	}

	if src.RemoveSchemasUpdate != nil {
		return json.Marshal(&src.RemoveSchemasUpdate)
	}

	if src.RemoveSnapshotRefUpdate != nil {
		return json.Marshal(&src.RemoveSnapshotRefUpdate)
	}

	if src.RemoveSnapshotsUpdate != nil {
		return json.Marshal(&src.RemoveSnapshotsUpdate)
	}

	if src.RemoveStatisticsUpdate != nil {
		return json.Marshal(&src.RemoveStatisticsUpdate)
	}

	if src.SetCurrentSchemaUpdate != nil {
		return json.Marshal(&src.SetCurrentSchemaUpdate)
	}

	if src.SetDefaultSortOrderUpdate != nil {
		return json.Marshal(&src.SetDefaultSortOrderUpdate)
	}

	if src.SetDefaultSpecUpdate != nil {
		return json.Marshal(&src.SetDefaultSpecUpdate)
	}

	if src.SetLocationUpdate != nil {
		return json.Marshal(&src.SetLocationUpdate)
	}

	if src.SetPropertiesUpdate != nil {
		return json.Marshal(&src.SetPropertiesUpdate)
	}

	if src.SetSnapshotRefUpdate != nil {
		return json.Marshal(&src.SetSnapshotRefUpdate)
	}

	if src.SetStatisticsUpdate != nil {
		return json.Marshal(&src.SetStatisticsUpdate)
	}

	if src.UpgradeFormatVersionUpdate != nil {
		return json.Marshal(&src.UpgradeFormatVersionUpdate)
	}

	return nil, nil // no data in anyOf schemas
}

func (src TableUpdate) ToMap() (map[string]interface{}, error) {
	if src.AddPartitionSpecUpdate != nil {
		return src.AddPartitionSpecUpdate.ToMap()
	}

	if src.AddSchemaUpdate != nil {
		return src.AddSchemaUpdate.ToMap()
	}

	if src.AddSnapshotUpdate != nil {
		return src.AddSnapshotUpdate.ToMap()
	}

	if src.AddSortOrderUpdate != nil {
		return src.AddSortOrderUpdate.ToMap()
	}

	if src.AssignUUIDUpdate != nil {
		return src.AssignUUIDUpdate.ToMap()
	}

	if src.EnableRowLineageUpdate != nil {
		return src.EnableRowLineageUpdate.ToMap()
	}

	if src.RemovePartitionSpecsUpdate != nil {
		return src.RemovePartitionSpecsUpdate.ToMap()
	}

	if src.RemovePropertiesUpdate != nil {
		return src.RemovePropertiesUpdate.ToMap()
	}

	if src.RemoveSchemasUpdate != nil {
		return src.RemoveSchemasUpdate.ToMap()
	}

	if src.RemoveSnapshotRefUpdate != nil {
		return src.RemoveSnapshotRefUpdate.ToMap()
	}

	if src.RemoveSnapshotsUpdate != nil {
		return src.RemoveSnapshotsUpdate.ToMap()
	}

	if src.RemoveStatisticsUpdate != nil {
		return src.RemoveStatisticsUpdate.ToMap()
	}

	if src.SetCurrentSchemaUpdate != nil {
		return src.SetCurrentSchemaUpdate.ToMap()
	}

	if src.SetDefaultSortOrderUpdate != nil {
		return src.SetDefaultSortOrderUpdate.ToMap()
	}

	if src.SetDefaultSpecUpdate != nil {
		return src.SetDefaultSpecUpdate.ToMap()
	}

	if src.SetLocationUpdate != nil {
		return src.SetLocationUpdate.ToMap()
	}

	if src.SetPropertiesUpdate != nil {
		return src.SetPropertiesUpdate.ToMap()
	}

	if src.SetSnapshotRefUpdate != nil {
		return src.SetSnapshotRefUpdate.ToMap()
	}

	if src.SetStatisticsUpdate != nil {
		return src.SetStatisticsUpdate.ToMap()
	}

	if src.UpgradeFormatVersionUpdate != nil {
		return src.UpgradeFormatVersionUpdate.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableTableUpdate struct {
	value *TableUpdate
	isSet bool
}

func (v NullableTableUpdate) Get() *TableUpdate {
	return v.value
}

func (v *NullableTableUpdate) Set(val *TableUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTableUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTableUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableUpdate(val *TableUpdate) *NullableTableUpdate {
	return &NullableTableUpdate{value: val, isSet: true}
}

func (v NullableTableUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


