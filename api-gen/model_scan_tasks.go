/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
)

// checks if the ScanTasks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanTasks{}

// ScanTasks Scan and planning tasks for server-side scan planning  - `plan-tasks` contains opaque units of planning work - `file-scan-tasks` contains a partial or complete list of table scan tasks - `delete-files` contains delete files referenced by file scan tasks  Each plan task must be passed to the fetchScanTasks endpoint to fetch the file scan tasks for the plan task.  The list of delete files must contain all delete files referenced by the file scan tasks. 
type ScanTasks struct {
	// Delete files referenced by file scan tasks
	DeleteFiles []DeleteFile `json:"delete-files,omitempty"`
	FileScanTasks []FileScanTask `json:"file-scan-tasks,omitempty"`
	PlanTasks []string `json:"plan-tasks,omitempty"`
}

// NewScanTasks instantiates a new ScanTasks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanTasks() *ScanTasks {
	this := ScanTasks{}
	return &this
}

// NewScanTasksWithDefaults instantiates a new ScanTasks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanTasksWithDefaults() *ScanTasks {
	this := ScanTasks{}
	return &this
}

// GetDeleteFiles returns the DeleteFiles field value if set, zero value otherwise.
func (o *ScanTasks) GetDeleteFiles() []DeleteFile {
	if o == nil || IsNil(o.DeleteFiles) {
		var ret []DeleteFile
		return ret
	}
	return o.DeleteFiles
}

// GetDeleteFilesOk returns a tuple with the DeleteFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanTasks) GetDeleteFilesOk() ([]DeleteFile, bool) {
	if o == nil || IsNil(o.DeleteFiles) {
		return nil, false
	}
	return o.DeleteFiles, true
}

// HasDeleteFiles returns a boolean if a field has been set.
func (o *ScanTasks) HasDeleteFiles() bool {
	if o != nil && !IsNil(o.DeleteFiles) {
		return true
	}

	return false
}

// SetDeleteFiles gets a reference to the given []DeleteFile and assigns it to the DeleteFiles field.
func (o *ScanTasks) SetDeleteFiles(v []DeleteFile) {
	o.DeleteFiles = v
}

// GetFileScanTasks returns the FileScanTasks field value if set, zero value otherwise.
func (o *ScanTasks) GetFileScanTasks() []FileScanTask {
	if o == nil || IsNil(o.FileScanTasks) {
		var ret []FileScanTask
		return ret
	}
	return o.FileScanTasks
}

// GetFileScanTasksOk returns a tuple with the FileScanTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanTasks) GetFileScanTasksOk() ([]FileScanTask, bool) {
	if o == nil || IsNil(o.FileScanTasks) {
		return nil, false
	}
	return o.FileScanTasks, true
}

// HasFileScanTasks returns a boolean if a field has been set.
func (o *ScanTasks) HasFileScanTasks() bool {
	if o != nil && !IsNil(o.FileScanTasks) {
		return true
	}

	return false
}

// SetFileScanTasks gets a reference to the given []FileScanTask and assigns it to the FileScanTasks field.
func (o *ScanTasks) SetFileScanTasks(v []FileScanTask) {
	o.FileScanTasks = v
}

// GetPlanTasks returns the PlanTasks field value if set, zero value otherwise.
func (o *ScanTasks) GetPlanTasks() []string {
	if o == nil || IsNil(o.PlanTasks) {
		var ret []string
		return ret
	}
	return o.PlanTasks
}

// GetPlanTasksOk returns a tuple with the PlanTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanTasks) GetPlanTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.PlanTasks) {
		return nil, false
	}
	return o.PlanTasks, true
}

// HasPlanTasks returns a boolean if a field has been set.
func (o *ScanTasks) HasPlanTasks() bool {
	if o != nil && !IsNil(o.PlanTasks) {
		return true
	}

	return false
}

// SetPlanTasks gets a reference to the given []string and assigns it to the PlanTasks field.
func (o *ScanTasks) SetPlanTasks(v []string) {
	o.PlanTasks = v
}

func (o ScanTasks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanTasks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteFiles) {
		toSerialize["delete-files"] = o.DeleteFiles
	}
	if !IsNil(o.FileScanTasks) {
		toSerialize["file-scan-tasks"] = o.FileScanTasks
	}
	if !IsNil(o.PlanTasks) {
		toSerialize["plan-tasks"] = o.PlanTasks
	}
	return toSerialize, nil
}

type NullableScanTasks struct {
	value *ScanTasks
	isSet bool
}

func (v NullableScanTasks) Get() *ScanTasks {
	return v.value
}

func (v *NullableScanTasks) Set(val *ScanTasks) {
	v.value = val
	v.isSet = true
}

func (v NullableScanTasks) IsSet() bool {
	return v.isSet
}

func (v *NullableScanTasks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanTasks(val *ScanTasks) *NullableScanTasks {
	return &NullableScanTasks{value: val, isSet: true}
}

func (v NullableScanTasks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanTasks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


