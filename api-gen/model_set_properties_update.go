/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetPropertiesUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetPropertiesUpdate{}

// SetPropertiesUpdate struct for SetPropertiesUpdate
type SetPropertiesUpdate struct {
	BaseUpdate
	Action *string `json:"action,omitempty"`
	Updates map[string]string `json:"updates"`
}

type _SetPropertiesUpdate SetPropertiesUpdate

// NewSetPropertiesUpdate instantiates a new SetPropertiesUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetPropertiesUpdate(updates map[string]string) *SetPropertiesUpdate {
	this := SetPropertiesUpdate{}
	return &this
}

// NewSetPropertiesUpdateWithDefaults instantiates a new SetPropertiesUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetPropertiesUpdateWithDefaults() *SetPropertiesUpdate {
	this := SetPropertiesUpdate{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SetPropertiesUpdate) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetPropertiesUpdate) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SetPropertiesUpdate) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SetPropertiesUpdate) SetAction(v string) {
	o.Action = &v
}

// GetUpdates returns the Updates field value
func (o *SetPropertiesUpdate) GetUpdates() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value
// and a boolean to check if the value has been set.
func (o *SetPropertiesUpdate) GetUpdatesOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Updates, true
}

// SetUpdates sets field value
func (o *SetPropertiesUpdate) SetUpdates(v map[string]string) {
	o.Updates = v
}

func (o SetPropertiesUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetPropertiesUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseUpdate, errBaseUpdate := json.Marshal(o.BaseUpdate)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	errBaseUpdate = json.Unmarshal([]byte(serializedBaseUpdate), &toSerialize)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["updates"] = o.Updates
	return toSerialize, nil
}

func (o *SetPropertiesUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"updates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetPropertiesUpdate := _SetPropertiesUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetPropertiesUpdate)

	if err != nil {
		return err
	}

	*o = SetPropertiesUpdate(varSetPropertiesUpdate)

	return err
}

type NullableSetPropertiesUpdate struct {
	value *SetPropertiesUpdate
	isSet bool
}

func (v NullableSetPropertiesUpdate) Get() *SetPropertiesUpdate {
	return v.value
}

func (v *NullableSetPropertiesUpdate) Set(val *SetPropertiesUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSetPropertiesUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSetPropertiesUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetPropertiesUpdate(val *SetPropertiesUpdate) *NullableSetPropertiesUpdate {
	return &NullableSetPropertiesUpdate{value: val, isSet: true}
}

func (v NullableSetPropertiesUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetPropertiesUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


