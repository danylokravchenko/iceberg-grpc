/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ViewUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewUpdate{}

// ViewUpdate struct for ViewUpdate
type ViewUpdate struct {
	AddSchemaUpdate *AddSchemaUpdate
	AddViewVersionUpdate *AddViewVersionUpdate
	AssignUUIDUpdate *AssignUUIDUpdate
	RemovePropertiesUpdate *RemovePropertiesUpdate
	SetCurrentViewVersionUpdate *SetCurrentViewVersionUpdate
	SetLocationUpdate *SetLocationUpdate
	SetPropertiesUpdate *SetPropertiesUpdate
	UpgradeFormatVersionUpdate *UpgradeFormatVersionUpdate
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ViewUpdate) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'add-schema'
	if jsonDict["action"] == "add-schema" {
		// try to unmarshal JSON data into AddSchemaUpdate
		err = json.Unmarshal(data, &dst.AddSchemaUpdate);
		if err == nil {
			jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
			if string(jsonAddSchemaUpdate) == "{}" { // empty struct
				dst.AddSchemaUpdate = nil
			} else {
				return nil // data stored in dst.AddSchemaUpdate, return on the first match
			}
		} else {
			dst.AddSchemaUpdate = nil
		}
	}

	

	// check if the discriminator value is 'add-view-version'
	if jsonDict["action"] == "add-view-version" {
		// try to unmarshal JSON data into AddViewVersionUpdate
		err = json.Unmarshal(data, &dst.AddViewVersionUpdate);
		if err == nil {
			jsonAddViewVersionUpdate, _ := json.Marshal(dst.AddViewVersionUpdate)
			if string(jsonAddViewVersionUpdate) == "{}" { // empty struct
				dst.AddViewVersionUpdate = nil
			} else {
				return nil // data stored in dst.AddViewVersionUpdate, return on the first match
			}
		} else {
			dst.AddViewVersionUpdate = nil
		}
	}

	// check if the discriminator value is 'assign-uuid'
	if jsonDict["action"] == "assign-uuid" {
		// try to unmarshal JSON data into AssignUUIDUpdate
		err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
		if err == nil {
			jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
			if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
				dst.AssignUUIDUpdate = nil
			} else {
				return nil // data stored in dst.AssignUUIDUpdate, return on the first match
			}
		} else {
			dst.AssignUUIDUpdate = nil
		}
	}

	
	// check if the discriminator value is 'remove-properties'
	if jsonDict["action"] == "remove-properties" {
		// try to unmarshal JSON data into RemovePropertiesUpdate
		err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
		if err == nil {
			jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
			if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
				dst.RemovePropertiesUpdate = nil
			} else {
				return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
			}
		} else {
			dst.RemovePropertiesUpdate = nil
		}
	}

	

	// check if the discriminator value is 'set-current-view-version'
	if jsonDict["action"] == "set-current-view-version" {
		// try to unmarshal JSON data into SetCurrentViewVersionUpdate
		err = json.Unmarshal(data, &dst.SetCurrentViewVersionUpdate);
		if err == nil {
			jsonSetCurrentViewVersionUpdate, _ := json.Marshal(dst.SetCurrentViewVersionUpdate)
			if string(jsonSetCurrentViewVersionUpdate) == "{}" { // empty struct
				dst.SetCurrentViewVersionUpdate = nil
			} else {
				return nil // data stored in dst.SetCurrentViewVersionUpdate, return on the first match
			}
		} else {
			dst.SetCurrentViewVersionUpdate = nil
		}
	}

	
	// check if the discriminator value is 'set-location'
	if jsonDict["action"] == "set-location" {
		// try to unmarshal JSON data into SetLocationUpdate
		err = json.Unmarshal(data, &dst.SetLocationUpdate);
		if err == nil {
			jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
			if string(jsonSetLocationUpdate) == "{}" { // empty struct
				dst.SetLocationUpdate = nil
			} else {
				return nil // data stored in dst.SetLocationUpdate, return on the first match
			}
		} else {
			dst.SetLocationUpdate = nil
		}
	}

	
	// check if the discriminator value is 'set-properties'
	if jsonDict["action"] == "set-properties" {
		// try to unmarshal JSON data into SetPropertiesUpdate
		err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
		if err == nil {
			jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
			if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
				dst.SetPropertiesUpdate = nil
			} else {
				return nil // data stored in dst.SetPropertiesUpdate, return on the first match
			}
		} else {
			dst.SetPropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'upgrade-format-version'
	if jsonDict["action"] == "upgrade-format-version" {
		// try to unmarshal JSON data into UpgradeFormatVersionUpdate
		err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
		if err == nil {
			jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
			if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
				dst.UpgradeFormatVersionUpdate = nil
			} else {
				return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
			}
		} else {
			dst.UpgradeFormatVersionUpdate = nil
		}
	}

	// check if the discriminator value is 'AddSchemaUpdate'
	if jsonDict["action"] == "AddSchemaUpdate" {
		// try to unmarshal JSON data into AddSchemaUpdate
		err = json.Unmarshal(data, &dst.AddSchemaUpdate);
		if err == nil {
			jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
			if string(jsonAddSchemaUpdate) == "{}" { // empty struct
				dst.AddSchemaUpdate = nil
			} else {
				return nil // data stored in dst.AddSchemaUpdate, return on the first match
			}
		} else {
			dst.AddSchemaUpdate = nil
		}
	}

	// check if the discriminator value is 'AddViewVersionUpdate'
	if jsonDict["action"] == "AddViewVersionUpdate" {
		// try to unmarshal JSON data into AddViewVersionUpdate
		err = json.Unmarshal(data, &dst.AddViewVersionUpdate);
		if err == nil {
			jsonAddViewVersionUpdate, _ := json.Marshal(dst.AddViewVersionUpdate)
			if string(jsonAddViewVersionUpdate) == "{}" { // empty struct
				dst.AddViewVersionUpdate = nil
			} else {
				return nil // data stored in dst.AddViewVersionUpdate, return on the first match
			}
		} else {
			dst.AddViewVersionUpdate = nil
		}
	}

	// check if the discriminator value is 'AssignUUIDUpdate'
	if jsonDict["action"] == "AssignUUIDUpdate" {
		// try to unmarshal JSON data into AssignUUIDUpdate
		err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
		if err == nil {
			jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
			if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
				dst.AssignUUIDUpdate = nil
			} else {
				return nil // data stored in dst.AssignUUIDUpdate, return on the first match
			}
		} else {
			dst.AssignUUIDUpdate = nil
		}
	}

	// check if the discriminator value is 'RemovePropertiesUpdate'
	if jsonDict["action"] == "RemovePropertiesUpdate" {
		// try to unmarshal JSON data into RemovePropertiesUpdate
		err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
		if err == nil {
			jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
			if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
				dst.RemovePropertiesUpdate = nil
			} else {
				return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
			}
		} else {
			dst.RemovePropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'SetCurrentViewVersionUpdate'
	if jsonDict["action"] == "SetCurrentViewVersionUpdate" {
		// try to unmarshal JSON data into SetCurrentViewVersionUpdate
		err = json.Unmarshal(data, &dst.SetCurrentViewVersionUpdate);
		if err == nil {
			jsonSetCurrentViewVersionUpdate, _ := json.Marshal(dst.SetCurrentViewVersionUpdate)
			if string(jsonSetCurrentViewVersionUpdate) == "{}" { // empty struct
				dst.SetCurrentViewVersionUpdate = nil
			} else {
				return nil // data stored in dst.SetCurrentViewVersionUpdate, return on the first match
			}
		} else {
			dst.SetCurrentViewVersionUpdate = nil
		}
	}

	// check if the discriminator value is 'SetLocationUpdate'
	if jsonDict["action"] == "SetLocationUpdate" {
		// try to unmarshal JSON data into SetLocationUpdate
		err = json.Unmarshal(data, &dst.SetLocationUpdate);
		if err == nil {
			jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
			if string(jsonSetLocationUpdate) == "{}" { // empty struct
				dst.SetLocationUpdate = nil
			} else {
				return nil // data stored in dst.SetLocationUpdate, return on the first match
			}
		} else {
			dst.SetLocationUpdate = nil
		}
	}

	// check if the discriminator value is 'SetPropertiesUpdate'
	if jsonDict["action"] == "SetPropertiesUpdate" {
		// try to unmarshal JSON data into SetPropertiesUpdate
		err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
		if err == nil {
			jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
			if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
				dst.SetPropertiesUpdate = nil
			} else {
				return nil // data stored in dst.SetPropertiesUpdate, return on the first match
			}
		} else {
			dst.SetPropertiesUpdate = nil
		}
	}

	// check if the discriminator value is 'UpgradeFormatVersionUpdate'
	if jsonDict["action"] == "UpgradeFormatVersionUpdate" {
		// try to unmarshal JSON data into UpgradeFormatVersionUpdate
		err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
		if err == nil {
			jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
			if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
				dst.UpgradeFormatVersionUpdate = nil
			} else {
				return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
			}
		} else {
			dst.UpgradeFormatVersionUpdate = nil
		}
	}

	// try to unmarshal JSON data into AddSchemaUpdate
	err = json.Unmarshal(data, &dst.AddSchemaUpdate);
	if err == nil {
		jsonAddSchemaUpdate, _ := json.Marshal(dst.AddSchemaUpdate)
		if string(jsonAddSchemaUpdate) == "{}" { // empty struct
			dst.AddSchemaUpdate = nil
		} else {
			return nil // data stored in dst.AddSchemaUpdate, return on the first match
		}
	} else {
		dst.AddSchemaUpdate = nil
	}

	// try to unmarshal JSON data into AddViewVersionUpdate
	err = json.Unmarshal(data, &dst.AddViewVersionUpdate);
	if err == nil {
		jsonAddViewVersionUpdate, _ := json.Marshal(dst.AddViewVersionUpdate)
		if string(jsonAddViewVersionUpdate) == "{}" { // empty struct
			dst.AddViewVersionUpdate = nil
		} else {
			return nil // data stored in dst.AddViewVersionUpdate, return on the first match
		}
	} else {
		dst.AddViewVersionUpdate = nil
	}

	// try to unmarshal JSON data into AssignUUIDUpdate
	err = json.Unmarshal(data, &dst.AssignUUIDUpdate);
	if err == nil {
		jsonAssignUUIDUpdate, _ := json.Marshal(dst.AssignUUIDUpdate)
		if string(jsonAssignUUIDUpdate) == "{}" { // empty struct
			dst.AssignUUIDUpdate = nil
		} else {
			return nil // data stored in dst.AssignUUIDUpdate, return on the first match
		}
	} else {
		dst.AssignUUIDUpdate = nil
	}

	// try to unmarshal JSON data into RemovePropertiesUpdate
	err = json.Unmarshal(data, &dst.RemovePropertiesUpdate);
	if err == nil {
		jsonRemovePropertiesUpdate, _ := json.Marshal(dst.RemovePropertiesUpdate)
		if string(jsonRemovePropertiesUpdate) == "{}" { // empty struct
			dst.RemovePropertiesUpdate = nil
		} else {
			return nil // data stored in dst.RemovePropertiesUpdate, return on the first match
		}
	} else {
		dst.RemovePropertiesUpdate = nil
	}

	// try to unmarshal JSON data into SetCurrentViewVersionUpdate
	err = json.Unmarshal(data, &dst.SetCurrentViewVersionUpdate);
	if err == nil {
		jsonSetCurrentViewVersionUpdate, _ := json.Marshal(dst.SetCurrentViewVersionUpdate)
		if string(jsonSetCurrentViewVersionUpdate) == "{}" { // empty struct
			dst.SetCurrentViewVersionUpdate = nil
		} else {
			return nil // data stored in dst.SetCurrentViewVersionUpdate, return on the first match
		}
	} else {
		dst.SetCurrentViewVersionUpdate = nil
	}

	// try to unmarshal JSON data into SetLocationUpdate
	err = json.Unmarshal(data, &dst.SetLocationUpdate);
	if err == nil {
		jsonSetLocationUpdate, _ := json.Marshal(dst.SetLocationUpdate)
		if string(jsonSetLocationUpdate) == "{}" { // empty struct
			dst.SetLocationUpdate = nil
		} else {
			return nil // data stored in dst.SetLocationUpdate, return on the first match
		}
	} else {
		dst.SetLocationUpdate = nil
	}

	// try to unmarshal JSON data into SetPropertiesUpdate
	err = json.Unmarshal(data, &dst.SetPropertiesUpdate);
	if err == nil {
		jsonSetPropertiesUpdate, _ := json.Marshal(dst.SetPropertiesUpdate)
		if string(jsonSetPropertiesUpdate) == "{}" { // empty struct
			dst.SetPropertiesUpdate = nil
		} else {
			return nil // data stored in dst.SetPropertiesUpdate, return on the first match
		}
	} else {
		dst.SetPropertiesUpdate = nil
	}

	// try to unmarshal JSON data into UpgradeFormatVersionUpdate
	err = json.Unmarshal(data, &dst.UpgradeFormatVersionUpdate);
	if err == nil {
		jsonUpgradeFormatVersionUpdate, _ := json.Marshal(dst.UpgradeFormatVersionUpdate)
		if string(jsonUpgradeFormatVersionUpdate) == "{}" { // empty struct
			dst.UpgradeFormatVersionUpdate = nil
		} else {
			return nil // data stored in dst.UpgradeFormatVersionUpdate, return on the first match
		}
	} else {
		dst.UpgradeFormatVersionUpdate = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ViewUpdate)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ViewUpdate) MarshalJSON() ([]byte, error) {
	if src.AddSchemaUpdate != nil {
		return json.Marshal(&src.AddSchemaUpdate)
	}

	if src.AddViewVersionUpdate != nil {
		return json.Marshal(&src.AddViewVersionUpdate)
	}

	if src.AssignUUIDUpdate != nil {
		return json.Marshal(&src.AssignUUIDUpdate)
	}

	if src.RemovePropertiesUpdate != nil {
		return json.Marshal(&src.RemovePropertiesUpdate)
	}

	if src.SetCurrentViewVersionUpdate != nil {
		return json.Marshal(&src.SetCurrentViewVersionUpdate)
	}

	if src.SetLocationUpdate != nil {
		return json.Marshal(&src.SetLocationUpdate)
	}

	if src.SetPropertiesUpdate != nil {
		return json.Marshal(&src.SetPropertiesUpdate)
	}

	if src.UpgradeFormatVersionUpdate != nil {
		return json.Marshal(&src.UpgradeFormatVersionUpdate)
	}

	return nil, nil // no data in anyOf schemas
}

func (src ViewUpdate) ToMap() (map[string]interface{}, error) {
	if src.AddSchemaUpdate != nil {
		return src.AddSchemaUpdate.ToMap()
	}

	if src.AddViewVersionUpdate != nil {
		return src.AddViewVersionUpdate.ToMap()
	}

	if src.AssignUUIDUpdate != nil {
		return src.AssignUUIDUpdate.ToMap()
	}

	if src.RemovePropertiesUpdate != nil {
		return src.RemovePropertiesUpdate.ToMap()
	}

	if src.SetCurrentViewVersionUpdate != nil {
		return src.SetCurrentViewVersionUpdate.ToMap()
	}

	if src.SetLocationUpdate != nil {
		return src.SetLocationUpdate.ToMap()
	}

	if src.SetPropertiesUpdate != nil {
		return src.SetPropertiesUpdate.ToMap()
	}

	if src.UpgradeFormatVersionUpdate != nil {
		return src.UpgradeFormatVersionUpdate.ToMap()
	}

    return nil, nil // no data in anyOf schemas
}

type NullableViewUpdate struct {
	value *ViewUpdate
	isSet bool
}

func (v NullableViewUpdate) Get() *ViewUpdate {
	return v.value
}

func (v *NullableViewUpdate) Set(val *ViewUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUpdate(val *ViewUpdate) *NullableViewUpdate {
	return &NullableViewUpdate{value: val, isSet: true}
}

func (v NullableViewUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


