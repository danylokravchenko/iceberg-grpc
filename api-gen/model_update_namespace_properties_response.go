/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateNamespacePropertiesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNamespacePropertiesResponse{}

// UpdateNamespacePropertiesResponse struct for UpdateNamespacePropertiesResponse
type UpdateNamespacePropertiesResponse struct {
	// List of property keys that were added or updated
	Updated []string `json:"updated"`
	// List of properties that were removed
	Removed []string `json:"removed"`
	// List of properties requested for removal that were not found in the namespace's properties. Represents a partial success response. Server's do not need to implement this.
	Missing []string `json:"missing,omitempty"`
}

type _UpdateNamespacePropertiesResponse UpdateNamespacePropertiesResponse

// NewUpdateNamespacePropertiesResponse instantiates a new UpdateNamespacePropertiesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNamespacePropertiesResponse(updated []string, removed []string) *UpdateNamespacePropertiesResponse {
	this := UpdateNamespacePropertiesResponse{}
	this.Updated = updated
	this.Removed = removed
	return &this
}

// NewUpdateNamespacePropertiesResponseWithDefaults instantiates a new UpdateNamespacePropertiesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNamespacePropertiesResponseWithDefaults() *UpdateNamespacePropertiesResponse {
	this := UpdateNamespacePropertiesResponse{}
	return &this
}

// GetUpdated returns the Updated field value
func (o *UpdateNamespacePropertiesResponse) GetUpdated() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *UpdateNamespacePropertiesResponse) GetUpdatedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updated, true
}

// SetUpdated sets field value
func (o *UpdateNamespacePropertiesResponse) SetUpdated(v []string) {
	o.Updated = v
}

// GetRemoved returns the Removed field value
func (o *UpdateNamespacePropertiesResponse) GetRemoved() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value
// and a boolean to check if the value has been set.
func (o *UpdateNamespacePropertiesResponse) GetRemovedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Removed, true
}

// SetRemoved sets field value
func (o *UpdateNamespacePropertiesResponse) SetRemoved(v []string) {
	o.Removed = v
}

// GetMissing returns the Missing field value if set, zero value otherwise.
func (o *UpdateNamespacePropertiesResponse) GetMissing() []string {
	if o == nil || IsNil(o.Missing) {
		var ret []string
		return ret
	}
	return o.Missing
}

// GetMissingOk returns a tuple with the Missing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNamespacePropertiesResponse) GetMissingOk() ([]string, bool) {
	if o == nil || IsNil(o.Missing) {
		return nil, false
	}
	return o.Missing, true
}

// HasMissing returns a boolean if a field has been set.
func (o *UpdateNamespacePropertiesResponse) HasMissing() bool {
	if o != nil && !IsNil(o.Missing) {
		return true
	}

	return false
}

// SetMissing gets a reference to the given []string and assigns it to the Missing field.
func (o *UpdateNamespacePropertiesResponse) SetMissing(v []string) {
	o.Missing = v
}

func (o UpdateNamespacePropertiesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNamespacePropertiesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["updated"] = o.Updated
	toSerialize["removed"] = o.Removed
	if !IsNil(o.Missing) {
		toSerialize["missing"] = o.Missing
	}
	return toSerialize, nil
}

func (o *UpdateNamespacePropertiesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"updated",
		"removed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateNamespacePropertiesResponse := _UpdateNamespacePropertiesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateNamespacePropertiesResponse)

	if err != nil {
		return err
	}

	*o = UpdateNamespacePropertiesResponse(varUpdateNamespacePropertiesResponse)

	return err
}

type NullableUpdateNamespacePropertiesResponse struct {
	value *UpdateNamespacePropertiesResponse
	isSet bool
}

func (v NullableUpdateNamespacePropertiesResponse) Get() *UpdateNamespacePropertiesResponse {
	return v.value
}

func (v *NullableUpdateNamespacePropertiesResponse) Set(val *UpdateNamespacePropertiesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNamespacePropertiesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNamespacePropertiesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNamespacePropertiesResponse(val *UpdateNamespacePropertiesResponse) *NullableUpdateNamespacePropertiesResponse {
	return &NullableUpdateNamespacePropertiesResponse{value: val, isSet: true}
}

func (v NullableUpdateNamespacePropertiesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNamespacePropertiesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


