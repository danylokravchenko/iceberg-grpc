/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetNamespaceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNamespaceResponse{}

// GetNamespaceResponse struct for GetNamespaceResponse
type GetNamespaceResponse struct {
	// Reference to one or more levels of a namespace
	Namespace []string `json:"namespace"`
	// Properties stored on the namespace, if supported by the server. If the server does not support namespace properties, it should return null for this field. If namespace properties are supported, but none are set, it should return an empty object.
	Properties map[string]string `json:"properties,omitempty"`
}

type _GetNamespaceResponse GetNamespaceResponse

// NewGetNamespaceResponse instantiates a new GetNamespaceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNamespaceResponse(namespace []string) *GetNamespaceResponse {
	this := GetNamespaceResponse{}
	this.Namespace = namespace
	return &this
}

// NewGetNamespaceResponseWithDefaults instantiates a new GetNamespaceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNamespaceResponseWithDefaults() *GetNamespaceResponse {
	this := GetNamespaceResponse{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *GetNamespaceResponse) GetNamespace() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *GetNamespaceResponse) GetNamespaceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace, true
}

// SetNamespace sets field value
func (o *GetNamespaceResponse) SetNamespace(v []string) {
	o.Namespace = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *GetNamespaceResponse) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNamespaceResponse) GetPropertiesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *GetNamespaceResponse) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *GetNamespaceResponse) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o GetNamespaceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNamespaceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *GetNamespaceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetNamespaceResponse := _GetNamespaceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetNamespaceResponse)

	if err != nil {
		return err
	}

	*o = GetNamespaceResponse(varGetNamespaceResponse)

	return err
}

type NullableGetNamespaceResponse struct {
	value *GetNamespaceResponse
	isSet bool
}

func (v NullableGetNamespaceResponse) Get() *GetNamespaceResponse {
	return v.value
}

func (v *NullableGetNamespaceResponse) Set(val *GetNamespaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNamespaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNamespaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNamespaceResponse(val *GetNamespaceResponse) *NullableGetNamespaceResponse {
	return &NullableGetNamespaceResponse{value: val, isSet: true}
}

func (v NullableGetNamespaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNamespaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


