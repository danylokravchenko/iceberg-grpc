/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompletedPlanningWithIDResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletedPlanningWithIDResult{}

// CompletedPlanningWithIDResult struct for CompletedPlanningWithIDResult
type CompletedPlanningWithIDResult struct {
	// Delete files referenced by file scan tasks
	DeleteFiles []DeleteFile `json:"delete-files,omitempty"`
	FileScanTasks []FileScanTask `json:"file-scan-tasks,omitempty"`
	PlanTasks []string `json:"plan-tasks,omitempty"`
	Status PlanStatus `json:"status"`
	// ID used to track a planning request
	PlanId *string `json:"plan-id,omitempty"`
}

type _CompletedPlanningWithIDResult CompletedPlanningWithIDResult

// NewCompletedPlanningWithIDResult instantiates a new CompletedPlanningWithIDResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletedPlanningWithIDResult(status PlanStatus) *CompletedPlanningWithIDResult {
	this := CompletedPlanningWithIDResult{}
	this.Status = status
	return &this
}

// NewCompletedPlanningWithIDResultWithDefaults instantiates a new CompletedPlanningWithIDResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletedPlanningWithIDResultWithDefaults() *CompletedPlanningWithIDResult {
	this := CompletedPlanningWithIDResult{}
	return &this
}

// GetDeleteFiles returns the DeleteFiles field value if set, zero value otherwise.
func (o *CompletedPlanningWithIDResult) GetDeleteFiles() []DeleteFile {
	if o == nil || IsNil(o.DeleteFiles) {
		var ret []DeleteFile
		return ret
	}
	return o.DeleteFiles
}

// GetDeleteFilesOk returns a tuple with the DeleteFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPlanningWithIDResult) GetDeleteFilesOk() ([]DeleteFile, bool) {
	if o == nil || IsNil(o.DeleteFiles) {
		return nil, false
	}
	return o.DeleteFiles, true
}

// HasDeleteFiles returns a boolean if a field has been set.
func (o *CompletedPlanningWithIDResult) HasDeleteFiles() bool {
	if o != nil && !IsNil(o.DeleteFiles) {
		return true
	}

	return false
}

// SetDeleteFiles gets a reference to the given []DeleteFile and assigns it to the DeleteFiles field.
func (o *CompletedPlanningWithIDResult) SetDeleteFiles(v []DeleteFile) {
	o.DeleteFiles = v
}

// GetFileScanTasks returns the FileScanTasks field value if set, zero value otherwise.
func (o *CompletedPlanningWithIDResult) GetFileScanTasks() []FileScanTask {
	if o == nil || IsNil(o.FileScanTasks) {
		var ret []FileScanTask
		return ret
	}
	return o.FileScanTasks
}

// GetFileScanTasksOk returns a tuple with the FileScanTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPlanningWithIDResult) GetFileScanTasksOk() ([]FileScanTask, bool) {
	if o == nil || IsNil(o.FileScanTasks) {
		return nil, false
	}
	return o.FileScanTasks, true
}

// HasFileScanTasks returns a boolean if a field has been set.
func (o *CompletedPlanningWithIDResult) HasFileScanTasks() bool {
	if o != nil && !IsNil(o.FileScanTasks) {
		return true
	}

	return false
}

// SetFileScanTasks gets a reference to the given []FileScanTask and assigns it to the FileScanTasks field.
func (o *CompletedPlanningWithIDResult) SetFileScanTasks(v []FileScanTask) {
	o.FileScanTasks = v
}

// GetPlanTasks returns the PlanTasks field value if set, zero value otherwise.
func (o *CompletedPlanningWithIDResult) GetPlanTasks() []string {
	if o == nil || IsNil(o.PlanTasks) {
		var ret []string
		return ret
	}
	return o.PlanTasks
}

// GetPlanTasksOk returns a tuple with the PlanTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPlanningWithIDResult) GetPlanTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.PlanTasks) {
		return nil, false
	}
	return o.PlanTasks, true
}

// HasPlanTasks returns a boolean if a field has been set.
func (o *CompletedPlanningWithIDResult) HasPlanTasks() bool {
	if o != nil && !IsNil(o.PlanTasks) {
		return true
	}

	return false
}

// SetPlanTasks gets a reference to the given []string and assigns it to the PlanTasks field.
func (o *CompletedPlanningWithIDResult) SetPlanTasks(v []string) {
	o.PlanTasks = v
}

// GetStatus returns the Status field value
func (o *CompletedPlanningWithIDResult) GetStatus() PlanStatus {
	if o == nil {
		var ret PlanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CompletedPlanningWithIDResult) GetStatusOk() (*PlanStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CompletedPlanningWithIDResult) SetStatus(v PlanStatus) {
	o.Status = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *CompletedPlanningWithIDResult) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedPlanningWithIDResult) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *CompletedPlanningWithIDResult) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *CompletedPlanningWithIDResult) SetPlanId(v string) {
	o.PlanId = &v
}

func (o CompletedPlanningWithIDResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletedPlanningWithIDResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteFiles) {
		toSerialize["delete-files"] = o.DeleteFiles
	}
	if !IsNil(o.FileScanTasks) {
		toSerialize["file-scan-tasks"] = o.FileScanTasks
	}
	if !IsNil(o.PlanTasks) {
		toSerialize["plan-tasks"] = o.PlanTasks
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.PlanId) {
		toSerialize["plan-id"] = o.PlanId
	}
	return toSerialize, nil
}

func (o *CompletedPlanningWithIDResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletedPlanningWithIDResult := _CompletedPlanningWithIDResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletedPlanningWithIDResult)

	if err != nil {
		return err
	}

	*o = CompletedPlanningWithIDResult(varCompletedPlanningWithIDResult)

	return err
}

type NullableCompletedPlanningWithIDResult struct {
	value *CompletedPlanningWithIDResult
	isSet bool
}

func (v NullableCompletedPlanningWithIDResult) Get() *CompletedPlanningWithIDResult {
	return v.value
}

func (v *NullableCompletedPlanningWithIDResult) Set(val *CompletedPlanningWithIDResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletedPlanningWithIDResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletedPlanningWithIDResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletedPlanningWithIDResult(val *CompletedPlanningWithIDResult) *NullableCompletedPlanningWithIDResult {
	return &NullableCompletedPlanningWithIDResult{value: val, isSet: true}
}

func (v NullableCompletedPlanningWithIDResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletedPlanningWithIDResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


