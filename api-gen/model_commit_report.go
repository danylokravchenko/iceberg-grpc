/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitReport{}

// CommitReport struct for CommitReport
type CommitReport struct {
	TableName string `json:"table-name"`
	SnapshotId int64 `json:"snapshot-id"`
	SequenceNumber int64 `json:"sequence-number"`
	Operation string `json:"operation"`
	Metrics map[string]MetricResult `json:"metrics"`
	Metadata map[string]string `json:"metadata,omitempty"`
}

type _CommitReport CommitReport

// NewCommitReport instantiates a new CommitReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitReport(tableName string, snapshotId int64, sequenceNumber int64, operation string, metrics map[string]MetricResult) *CommitReport {
	this := CommitReport{}
	this.TableName = tableName
	this.SnapshotId = snapshotId
	this.SequenceNumber = sequenceNumber
	this.Operation = operation
	this.Metrics = metrics
	return &this
}

// NewCommitReportWithDefaults instantiates a new CommitReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitReportWithDefaults() *CommitReport {
	this := CommitReport{}
	return &this
}

// GetTableName returns the TableName field value
func (o *CommitReport) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *CommitReport) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *CommitReport) SetTableName(v string) {
	o.TableName = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *CommitReport) GetSnapshotId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *CommitReport) GetSnapshotIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *CommitReport) SetSnapshotId(v int64) {
	o.SnapshotId = v
}

// GetSequenceNumber returns the SequenceNumber field value
func (o *CommitReport) GetSequenceNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
func (o *CommitReport) GetSequenceNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumber, true
}

// SetSequenceNumber sets field value
func (o *CommitReport) SetSequenceNumber(v int64) {
	o.SequenceNumber = v
}

// GetOperation returns the Operation field value
func (o *CommitReport) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *CommitReport) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *CommitReport) SetOperation(v string) {
	o.Operation = v
}

// GetMetrics returns the Metrics field value
func (o *CommitReport) GetMetrics() map[string]MetricResult {
	if o == nil {
		var ret map[string]MetricResult
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *CommitReport) GetMetricsOk() (map[string]MetricResult, bool) {
	if o == nil {
		return map[string]MetricResult{}, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *CommitReport) SetMetrics(v map[string]MetricResult) {
	o.Metrics = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CommitReport) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitReport) GetMetadataOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]string{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CommitReport) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CommitReport) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o CommitReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["table-name"] = o.TableName
	toSerialize["snapshot-id"] = o.SnapshotId
	toSerialize["sequence-number"] = o.SequenceNumber
	toSerialize["operation"] = o.Operation
	toSerialize["metrics"] = o.Metrics
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *CommitReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"table-name",
		"snapshot-id",
		"sequence-number",
		"operation",
		"metrics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitReport := _CommitReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitReport)

	if err != nil {
		return err
	}

	*o = CommitReport(varCommitReport)

	return err
}

type NullableCommitReport struct {
	value *CommitReport
	isSet bool
}

func (v NullableCommitReport) Get() *CommitReport {
	return v.value
}

func (v *NullableCommitReport) Set(val *CommitReport) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitReport) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitReport(val *CommitReport) *NullableCommitReport {
	return &NullableCommitReport{value: val, isSet: true}
}

func (v NullableCommitReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


