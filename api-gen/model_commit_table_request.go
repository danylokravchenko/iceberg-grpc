/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitTableRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitTableRequest{}

// CommitTableRequest struct for CommitTableRequest
type CommitTableRequest struct {
	// Table identifier to update; must be present for CommitTransactionRequest
	Identifier *TableIdentifier `json:"identifier,omitempty"`
	Requirements []TableRequirement `json:"requirements"`
	Updates []TableUpdate `json:"updates"`
}

type _CommitTableRequest CommitTableRequest

// NewCommitTableRequest instantiates a new CommitTableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitTableRequest(requirements []TableRequirement, updates []TableUpdate) *CommitTableRequest {
	this := CommitTableRequest{}
	this.Requirements = requirements
	this.Updates = updates
	return &this
}

// NewCommitTableRequestWithDefaults instantiates a new CommitTableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitTableRequestWithDefaults() *CommitTableRequest {
	this := CommitTableRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *CommitTableRequest) GetIdentifier() TableIdentifier {
	if o == nil || IsNil(o.Identifier) {
		var ret TableIdentifier
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitTableRequest) GetIdentifierOk() (*TableIdentifier, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *CommitTableRequest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given TableIdentifier and assigns it to the Identifier field.
func (o *CommitTableRequest) SetIdentifier(v TableIdentifier) {
	o.Identifier = &v
}

// GetRequirements returns the Requirements field value
func (o *CommitTableRequest) GetRequirements() []TableRequirement {
	if o == nil {
		var ret []TableRequirement
		return ret
	}

	return o.Requirements
}

// GetRequirementsOk returns a tuple with the Requirements field value
// and a boolean to check if the value has been set.
func (o *CommitTableRequest) GetRequirementsOk() ([]TableRequirement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requirements, true
}

// SetRequirements sets field value
func (o *CommitTableRequest) SetRequirements(v []TableRequirement) {
	o.Requirements = v
}

// GetUpdates returns the Updates field value
func (o *CommitTableRequest) GetUpdates() []TableUpdate {
	if o == nil {
		var ret []TableUpdate
		return ret
	}

	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value
// and a boolean to check if the value has been set.
func (o *CommitTableRequest) GetUpdatesOk() ([]TableUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updates, true
}

// SetUpdates sets field value
func (o *CommitTableRequest) SetUpdates(v []TableUpdate) {
	o.Updates = v
}

func (o CommitTableRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitTableRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	toSerialize["requirements"] = o.Requirements
	toSerialize["updates"] = o.Updates
	return toSerialize, nil
}

func (o *CommitTableRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"requirements",
		"updates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitTableRequest := _CommitTableRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitTableRequest)

	if err != nil {
		return err
	}

	*o = CommitTableRequest(varCommitTableRequest)

	return err
}

type NullableCommitTableRequest struct {
	value *CommitTableRequest
	isSet bool
}

func (v NullableCommitTableRequest) Get() *CommitTableRequest {
	return v.value
}

func (v *NullableCommitTableRequest) Set(val *CommitTableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitTableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitTableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitTableRequest(val *CommitTableRequest) *NullableCommitTableRequest {
	return &NullableCommitTableRequest{value: val, isSet: true}
}

func (v NullableCommitTableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitTableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


