/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateViewRequest{}

// CreateViewRequest struct for CreateViewRequest
type CreateViewRequest struct {
	Name string `json:"name"`
	Location *string `json:"location,omitempty"`
	Schema Schema `json:"schema"`
	// The view version to create, will replace the schema-id sent within the view-version with the id assigned to the provided schema
	ViewVersion ViewVersion `json:"view-version"`
	Properties map[string]string `json:"properties"`
}

type _CreateViewRequest CreateViewRequest

// NewCreateViewRequest instantiates a new CreateViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateViewRequest(name string, schema Schema, viewVersion ViewVersion, properties map[string]string) *CreateViewRequest {
	this := CreateViewRequest{}
	this.Name = name
	this.Schema = schema
	this.ViewVersion = viewVersion
	this.Properties = properties
	return &this
}

// NewCreateViewRequestWithDefaults instantiates a new CreateViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateViewRequestWithDefaults() *CreateViewRequest {
	this := CreateViewRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateViewRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateViewRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateViewRequest) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CreateViewRequest) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateViewRequest) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CreateViewRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *CreateViewRequest) SetLocation(v string) {
	o.Location = &v
}

// GetSchema returns the Schema field value
func (o *CreateViewRequest) GetSchema() Schema {
	if o == nil {
		var ret Schema
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *CreateViewRequest) GetSchemaOk() (*Schema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *CreateViewRequest) SetSchema(v Schema) {
	o.Schema = v
}

// GetViewVersion returns the ViewVersion field value
func (o *CreateViewRequest) GetViewVersion() ViewVersion {
	if o == nil {
		var ret ViewVersion
		return ret
	}

	return o.ViewVersion
}

// GetViewVersionOk returns a tuple with the ViewVersion field value
// and a boolean to check if the value has been set.
func (o *CreateViewRequest) GetViewVersionOk() (*ViewVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewVersion, true
}

// SetViewVersion sets field value
func (o *CreateViewRequest) SetViewVersion(v ViewVersion) {
	o.ViewVersion = v
}

// GetProperties returns the Properties field value
func (o *CreateViewRequest) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *CreateViewRequest) GetPropertiesOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *CreateViewRequest) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o CreateViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["schema"] = o.Schema
	toSerialize["view-version"] = o.ViewVersion
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *CreateViewRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"schema",
		"view-version",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateViewRequest := _CreateViewRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateViewRequest)

	if err != nil {
		return err
	}

	*o = CreateViewRequest(varCreateViewRequest)

	return err
}

type NullableCreateViewRequest struct {
	value *CreateViewRequest
	isSet bool
}

func (v NullableCreateViewRequest) Get() *CreateViewRequest {
	return v.value
}

func (v *NullableCreateViewRequest) Set(val *CreateViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateViewRequest(val *CreateViewRequest) *NullableCreateViewRequest {
	return &NullableCreateViewRequest{value: val, isSet: true}
}

func (v NullableCreateViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


