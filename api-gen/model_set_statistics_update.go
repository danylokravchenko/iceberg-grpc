/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetStatisticsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetStatisticsUpdate{}

// SetStatisticsUpdate struct for SetStatisticsUpdate
type SetStatisticsUpdate struct {
	BaseUpdate
	Action *string `json:"action,omitempty"`
	// This optional field is **DEPRECATED for REMOVAL** since it contains redundant information. Clients should use the `statistics.snapshot-id` field instead.
	// Deprecated
	SnapshotId *int64 `json:"snapshot-id,omitempty"`
	Statistics StatisticsFile `json:"statistics"`
}

type _SetStatisticsUpdate SetStatisticsUpdate

// NewSetStatisticsUpdate instantiates a new SetStatisticsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetStatisticsUpdate(statistics StatisticsFile) *SetStatisticsUpdate {
	this := SetStatisticsUpdate{}
	return &this
}

// NewSetStatisticsUpdateWithDefaults instantiates a new SetStatisticsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetStatisticsUpdateWithDefaults() *SetStatisticsUpdate {
	this := SetStatisticsUpdate{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SetStatisticsUpdate) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetStatisticsUpdate) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SetStatisticsUpdate) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SetStatisticsUpdate) SetAction(v string) {
	o.Action = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
// Deprecated
func (o *SetStatisticsUpdate) GetSnapshotId() int64 {
	if o == nil || IsNil(o.SnapshotId) {
		var ret int64
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SetStatisticsUpdate) GetSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *SetStatisticsUpdate) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given int64 and assigns it to the SnapshotId field.
// Deprecated
func (o *SetStatisticsUpdate) SetSnapshotId(v int64) {
	o.SnapshotId = &v
}

// GetStatistics returns the Statistics field value
func (o *SetStatisticsUpdate) GetStatistics() StatisticsFile {
	if o == nil {
		var ret StatisticsFile
		return ret
	}

	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value
// and a boolean to check if the value has been set.
func (o *SetStatisticsUpdate) GetStatisticsOk() (*StatisticsFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statistics, true
}

// SetStatistics sets field value
func (o *SetStatisticsUpdate) SetStatistics(v StatisticsFile) {
	o.Statistics = v
}

func (o SetStatisticsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetStatisticsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseUpdate, errBaseUpdate := json.Marshal(o.BaseUpdate)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	errBaseUpdate = json.Unmarshal([]byte(serializedBaseUpdate), &toSerialize)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot-id"] = o.SnapshotId
	}
	toSerialize["statistics"] = o.Statistics
	return toSerialize, nil
}

func (o *SetStatisticsUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statistics",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetStatisticsUpdate := _SetStatisticsUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetStatisticsUpdate)

	if err != nil {
		return err
	}

	*o = SetStatisticsUpdate(varSetStatisticsUpdate)

	return err
}

type NullableSetStatisticsUpdate struct {
	value *SetStatisticsUpdate
	isSet bool
}

func (v NullableSetStatisticsUpdate) Get() *SetStatisticsUpdate {
	return v.value
}

func (v *NullableSetStatisticsUpdate) Set(val *SetStatisticsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSetStatisticsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSetStatisticsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetStatisticsUpdate(val *SetStatisticsUpdate) *NullableSetStatisticsUpdate {
	return &NullableSetStatisticsUpdate{value: val, isSet: true}
}

func (v NullableSetStatisticsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetStatisticsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


