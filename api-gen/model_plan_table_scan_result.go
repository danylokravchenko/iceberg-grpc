/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PlanTableScanResult - Result of server-side scan planning for planTableScan
type PlanTableScanResult struct {
	AsyncPlanningResult *AsyncPlanningResult
	CompletedPlanningWithIDResult *CompletedPlanningWithIDResult
	EmptyPlanningResult *EmptyPlanningResult
	FailedPlanningResult *FailedPlanningResult
}

// AsyncPlanningResultAsPlanTableScanResult is a convenience function that returns AsyncPlanningResult wrapped in PlanTableScanResult
func AsyncPlanningResultAsPlanTableScanResult(v *AsyncPlanningResult) PlanTableScanResult {
	return PlanTableScanResult{
		AsyncPlanningResult: v,
	}
}

// CompletedPlanningWithIDResultAsPlanTableScanResult is a convenience function that returns CompletedPlanningWithIDResult wrapped in PlanTableScanResult
func CompletedPlanningWithIDResultAsPlanTableScanResult(v *CompletedPlanningWithIDResult) PlanTableScanResult {
	return PlanTableScanResult{
		CompletedPlanningWithIDResult: v,
	}
}

// EmptyPlanningResultAsPlanTableScanResult is a convenience function that returns EmptyPlanningResult wrapped in PlanTableScanResult
func EmptyPlanningResultAsPlanTableScanResult(v *EmptyPlanningResult) PlanTableScanResult {
	return PlanTableScanResult{
		EmptyPlanningResult: v,
	}
}

// FailedPlanningResultAsPlanTableScanResult is a convenience function that returns FailedPlanningResult wrapped in PlanTableScanResult
func FailedPlanningResultAsPlanTableScanResult(v *FailedPlanningResult) PlanTableScanResult {
	return PlanTableScanResult{
		FailedPlanningResult: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PlanTableScanResult) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AsyncPlanningResult
	err = newStrictDecoder(data).Decode(&dst.AsyncPlanningResult)
	if err == nil {
		jsonAsyncPlanningResult, _ := json.Marshal(dst.AsyncPlanningResult)
		if string(jsonAsyncPlanningResult) == "{}" { // empty struct
			dst.AsyncPlanningResult = nil
		} else {
			if err = validator.Validate(dst.AsyncPlanningResult); err != nil {
				dst.AsyncPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.AsyncPlanningResult = nil
	}

	// try to unmarshal data into CompletedPlanningWithIDResult
	err = newStrictDecoder(data).Decode(&dst.CompletedPlanningWithIDResult)
	if err == nil {
		jsonCompletedPlanningWithIDResult, _ := json.Marshal(dst.CompletedPlanningWithIDResult)
		if string(jsonCompletedPlanningWithIDResult) == "{}" { // empty struct
			dst.CompletedPlanningWithIDResult = nil
		} else {
			if err = validator.Validate(dst.CompletedPlanningWithIDResult); err != nil {
				dst.CompletedPlanningWithIDResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletedPlanningWithIDResult = nil
	}

	// try to unmarshal data into EmptyPlanningResult
	err = newStrictDecoder(data).Decode(&dst.EmptyPlanningResult)
	if err == nil {
		jsonEmptyPlanningResult, _ := json.Marshal(dst.EmptyPlanningResult)
		if string(jsonEmptyPlanningResult) == "{}" { // empty struct
			dst.EmptyPlanningResult = nil
		} else {
			if err = validator.Validate(dst.EmptyPlanningResult); err != nil {
				dst.EmptyPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.EmptyPlanningResult = nil
	}

	// try to unmarshal data into FailedPlanningResult
	err = newStrictDecoder(data).Decode(&dst.FailedPlanningResult)
	if err == nil {
		jsonFailedPlanningResult, _ := json.Marshal(dst.FailedPlanningResult)
		if string(jsonFailedPlanningResult) == "{}" { // empty struct
			dst.FailedPlanningResult = nil
		} else {
			if err = validator.Validate(dst.FailedPlanningResult); err != nil {
				dst.FailedPlanningResult = nil
			} else {
				match++
			}
		}
	} else {
		dst.FailedPlanningResult = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AsyncPlanningResult = nil
		dst.CompletedPlanningWithIDResult = nil
		dst.EmptyPlanningResult = nil
		dst.FailedPlanningResult = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PlanTableScanResult)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PlanTableScanResult)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PlanTableScanResult) MarshalJSON() ([]byte, error) {
	if src.AsyncPlanningResult != nil {
		return json.Marshal(&src.AsyncPlanningResult)
	}

	if src.CompletedPlanningWithIDResult != nil {
		return json.Marshal(&src.CompletedPlanningWithIDResult)
	}

	if src.EmptyPlanningResult != nil {
		return json.Marshal(&src.EmptyPlanningResult)
	}

	if src.FailedPlanningResult != nil {
		return json.Marshal(&src.FailedPlanningResult)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PlanTableScanResult) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AsyncPlanningResult != nil {
		return obj.AsyncPlanningResult
	}

	if obj.CompletedPlanningWithIDResult != nil {
		return obj.CompletedPlanningWithIDResult
	}

	if obj.EmptyPlanningResult != nil {
		return obj.EmptyPlanningResult
	}

	if obj.FailedPlanningResult != nil {
		return obj.FailedPlanningResult
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PlanTableScanResult) GetActualInstanceValue() (interface{}) {
	if obj.AsyncPlanningResult != nil {
		return *obj.AsyncPlanningResult
	}

	if obj.CompletedPlanningWithIDResult != nil {
		return *obj.CompletedPlanningWithIDResult
	}

	if obj.EmptyPlanningResult != nil {
		return *obj.EmptyPlanningResult
	}

	if obj.FailedPlanningResult != nil {
		return *obj.FailedPlanningResult
	}

	// all schemas are nil
	return nil
}

type NullablePlanTableScanResult struct {
	value *PlanTableScanResult
	isSet bool
}

func (v NullablePlanTableScanResult) Get() *PlanTableScanResult {
	return v.value
}

func (v *NullablePlanTableScanResult) Set(val *PlanTableScanResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanTableScanResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanTableScanResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanTableScanResult(val *PlanTableScanResult) *NullablePlanTableScanResult {
	return &NullablePlanTableScanResult{value: val, isSet: true}
}

func (v NullablePlanTableScanResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanTableScanResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


