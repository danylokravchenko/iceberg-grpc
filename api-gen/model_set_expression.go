/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetExpression{}

// SetExpression struct for SetExpression
type SetExpression struct {
	Type string `json:"type"`
	Term Term `json:"term"`
	Values []map[string]interface{} `json:"values"`
}

type _SetExpression SetExpression

// NewSetExpression instantiates a new SetExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetExpression(type_ string, term Term, values []map[string]interface{}) *SetExpression {
	this := SetExpression{}
	this.Type = type_
	this.Term = term
	this.Values = values
	return &this
}

// NewSetExpressionWithDefaults instantiates a new SetExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetExpressionWithDefaults() *SetExpression {
	this := SetExpression{}
	return &this
}

// GetType returns the Type field value
func (o *SetExpression) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SetExpression) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SetExpression) SetType(v string) {
	o.Type = v
}

// GetTerm returns the Term field value
func (o *SetExpression) GetTerm() Term {
	if o == nil {
		var ret Term
		return ret
	}

	return o.Term
}

// GetTermOk returns a tuple with the Term field value
// and a boolean to check if the value has been set.
func (o *SetExpression) GetTermOk() (*Term, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Term, true
}

// SetTerm sets field value
func (o *SetExpression) SetTerm(v Term) {
	o.Term = v
}

// GetValues returns the Values field value
func (o *SetExpression) GetValues() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *SetExpression) GetValuesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *SetExpression) SetValues(v []map[string]interface{}) {
	o.Values = v
}

func (o SetExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["term"] = o.Term
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *SetExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"term",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetExpression := _SetExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetExpression)

	if err != nil {
		return err
	}

	*o = SetExpression(varSetExpression)

	return err
}

type NullableSetExpression struct {
	value *SetExpression
	isSet bool
}

func (v NullableSetExpression) Get() *SetExpression {
	return v.value
}

func (v *NullableSetExpression) Set(val *SetExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableSetExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableSetExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetExpression(val *SetExpression) *NullableSetExpression {
	return &NullableSetExpression{value: val, isSet: true}
}

func (v NullableSetExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


