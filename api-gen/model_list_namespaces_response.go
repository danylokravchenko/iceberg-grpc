/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
)

// checks if the ListNamespacesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListNamespacesResponse{}

// ListNamespacesResponse struct for ListNamespacesResponse
type ListNamespacesResponse struct {
	// An opaque token that allows clients to make use of pagination for list APIs (e.g. ListTables). Clients may initiate the first paginated request by sending an empty query parameter `pageToken` to the server. Servers that support pagination should identify the `pageToken` parameter and return a `next-page-token` in the response if there are more results available.  After the initial request, the value of `next-page-token` from each response must be used as the `pageToken` parameter value for the next request. The server must return `null` value for the `next-page-token` in the last response. Servers that support pagination must return all results in a single response with the value of `next-page-token` set to `null` if the query parameter `pageToken` is not set in the request. Servers that do not support pagination should ignore the `pageToken` parameter and return all results in a single response. The `next-page-token` must be omitted from the response. Clients must interpret either `null` or missing response value of `next-page-token` as the end of the listing results.
	NextPageToken *string `json:"next-page-token,omitempty"`
	Namespaces [][]string `json:"namespaces,omitempty"`
}

// NewListNamespacesResponse instantiates a new ListNamespacesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListNamespacesResponse() *ListNamespacesResponse {
	this := ListNamespacesResponse{}
	return &this
}

// NewListNamespacesResponseWithDefaults instantiates a new ListNamespacesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListNamespacesResponseWithDefaults() *ListNamespacesResponse {
	this := ListNamespacesResponse{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ListNamespacesResponse) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNamespacesResponse) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *ListNamespacesResponse) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ListNamespacesResponse) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *ListNamespacesResponse) GetNamespaces() [][]string {
	if o == nil || IsNil(o.Namespaces) {
		var ret [][]string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNamespacesResponse) GetNamespacesOk() ([][]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *ListNamespacesResponse) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given [][]string and assigns it to the Namespaces field.
func (o *ListNamespacesResponse) SetNamespaces(v [][]string) {
	o.Namespaces = v
}

func (o ListNamespacesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListNamespacesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["next-page-token"] = o.NextPageToken
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	return toSerialize, nil
}

type NullableListNamespacesResponse struct {
	value *ListNamespacesResponse
	isSet bool
}

func (v NullableListNamespacesResponse) Get() *ListNamespacesResponse {
	return v.value
}

func (v *NullableListNamespacesResponse) Set(val *ListNamespacesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListNamespacesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListNamespacesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNamespacesResponse(val *ListNamespacesResponse) *NullableListNamespacesResponse {
	return &NullableListNamespacesResponse{value: val, isSet: true}
}

func (v NullableListNamespacesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNamespacesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


