/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewVersion{}

// ViewVersion struct for ViewVersion
type ViewVersion struct {
	VersionId int32 `json:"version-id"`
	TimestampMs int64 `json:"timestamp-ms"`
	// Schema ID to set as current, or -1 to set last added schema
	SchemaId int32 `json:"schema-id"`
	Summary map[string]string `json:"summary"`
	Representations []ViewRepresentation `json:"representations"`
	DefaultCatalog *string `json:"default-catalog,omitempty"`
	// Reference to one or more levels of a namespace
	DefaultNamespace []string `json:"default-namespace"`
}

type _ViewVersion ViewVersion

// NewViewVersion instantiates a new ViewVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewVersion(versionId int32, timestampMs int64, schemaId int32, summary map[string]string, representations []ViewRepresentation, defaultNamespace []string) *ViewVersion {
	this := ViewVersion{}
	this.VersionId = versionId
	this.TimestampMs = timestampMs
	this.SchemaId = schemaId
	this.Summary = summary
	this.Representations = representations
	this.DefaultNamespace = defaultNamespace
	return &this
}

// NewViewVersionWithDefaults instantiates a new ViewVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewVersionWithDefaults() *ViewVersion {
	this := ViewVersion{}
	return &this
}

// GetVersionId returns the VersionId field value
func (o *ViewVersion) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *ViewVersion) SetVersionId(v int32) {
	o.VersionId = v
}

// GetTimestampMs returns the TimestampMs field value
func (o *ViewVersion) GetTimestampMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TimestampMs
}

// GetTimestampMsOk returns a tuple with the TimestampMs field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetTimestampMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampMs, true
}

// SetTimestampMs sets field value
func (o *ViewVersion) SetTimestampMs(v int64) {
	o.TimestampMs = v
}

// GetSchemaId returns the SchemaId field value
func (o *ViewVersion) GetSchemaId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetSchemaIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *ViewVersion) SetSchemaId(v int32) {
	o.SchemaId = v
}

// GetSummary returns the Summary field value
func (o *ViewVersion) GetSummary() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetSummaryOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Summary, true
}

// SetSummary sets field value
func (o *ViewVersion) SetSummary(v map[string]string) {
	o.Summary = v
}

// GetRepresentations returns the Representations field value
func (o *ViewVersion) GetRepresentations() []ViewRepresentation {
	if o == nil {
		var ret []ViewRepresentation
		return ret
	}

	return o.Representations
}

// GetRepresentationsOk returns a tuple with the Representations field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetRepresentationsOk() ([]ViewRepresentation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Representations, true
}

// SetRepresentations sets field value
func (o *ViewVersion) SetRepresentations(v []ViewRepresentation) {
	o.Representations = v
}

// GetDefaultCatalog returns the DefaultCatalog field value if set, zero value otherwise.
func (o *ViewVersion) GetDefaultCatalog() string {
	if o == nil || IsNil(o.DefaultCatalog) {
		var ret string
		return ret
	}
	return *o.DefaultCatalog
}

// GetDefaultCatalogOk returns a tuple with the DefaultCatalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetDefaultCatalogOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultCatalog) {
		return nil, false
	}
	return o.DefaultCatalog, true
}

// HasDefaultCatalog returns a boolean if a field has been set.
func (o *ViewVersion) HasDefaultCatalog() bool {
	if o != nil && !IsNil(o.DefaultCatalog) {
		return true
	}

	return false
}

// SetDefaultCatalog gets a reference to the given string and assigns it to the DefaultCatalog field.
func (o *ViewVersion) SetDefaultCatalog(v string) {
	o.DefaultCatalog = &v
}

// GetDefaultNamespace returns the DefaultNamespace field value
func (o *ViewVersion) GetDefaultNamespace() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DefaultNamespace
}

// GetDefaultNamespaceOk returns a tuple with the DefaultNamespace field value
// and a boolean to check if the value has been set.
func (o *ViewVersion) GetDefaultNamespaceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultNamespace, true
}

// SetDefaultNamespace sets field value
func (o *ViewVersion) SetDefaultNamespace(v []string) {
	o.DefaultNamespace = v
}

func (o ViewVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version-id"] = o.VersionId
	toSerialize["timestamp-ms"] = o.TimestampMs
	toSerialize["schema-id"] = o.SchemaId
	toSerialize["summary"] = o.Summary
	toSerialize["representations"] = o.Representations
	if !IsNil(o.DefaultCatalog) {
		toSerialize["default-catalog"] = o.DefaultCatalog
	}
	toSerialize["default-namespace"] = o.DefaultNamespace
	return toSerialize, nil
}

func (o *ViewVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version-id",
		"timestamp-ms",
		"schema-id",
		"summary",
		"representations",
		"default-namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewVersion := _ViewVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewVersion)

	if err != nil {
		return err
	}

	*o = ViewVersion(varViewVersion)

	return err
}

type NullableViewVersion struct {
	value *ViewVersion
	isSet bool
}

func (v NullableViewVersion) Get() *ViewVersion {
	return v.value
}

func (v *NullableViewVersion) Set(val *ViewVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableViewVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableViewVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewVersion(val *ViewVersion) *NullableViewVersion {
	return &NullableViewVersion{value: val, isSet: true}
}

func (v NullableViewVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


