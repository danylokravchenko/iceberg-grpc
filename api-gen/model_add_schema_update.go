/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddSchemaUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddSchemaUpdate{}

// AddSchemaUpdate struct for AddSchemaUpdate
type AddSchemaUpdate struct {
	BaseUpdate
	Action *string `json:"action,omitempty"`
	Schema Schema `json:"schema"`
	// This optional field is **DEPRECATED for REMOVAL** since it more safe to handle this internally, and shouldn't be exposed to the clients. The highest assigned column ID for the table. This is used to ensure columns are always assigned an unused ID when evolving schemas. When omitted, it will be computed on the server side.
	// Deprecated
	LastColumnId *int32 `json:"last-column-id,omitempty"`
}

type _AddSchemaUpdate AddSchemaUpdate

// NewAddSchemaUpdate instantiates a new AddSchemaUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddSchemaUpdate(schema Schema) *AddSchemaUpdate {
	this := AddSchemaUpdate{}
	return &this
}

// NewAddSchemaUpdateWithDefaults instantiates a new AddSchemaUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSchemaUpdateWithDefaults() *AddSchemaUpdate {
	this := AddSchemaUpdate{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AddSchemaUpdate) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSchemaUpdate) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AddSchemaUpdate) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *AddSchemaUpdate) SetAction(v string) {
	o.Action = &v
}

// GetSchema returns the Schema field value
func (o *AddSchemaUpdate) GetSchema() Schema {
	if o == nil {
		var ret Schema
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *AddSchemaUpdate) GetSchemaOk() (*Schema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *AddSchemaUpdate) SetSchema(v Schema) {
	o.Schema = v
}

// GetLastColumnId returns the LastColumnId field value if set, zero value otherwise.
// Deprecated
func (o *AddSchemaUpdate) GetLastColumnId() int32 {
	if o == nil || IsNil(o.LastColumnId) {
		var ret int32
		return ret
	}
	return *o.LastColumnId
}

// GetLastColumnIdOk returns a tuple with the LastColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AddSchemaUpdate) GetLastColumnIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastColumnId) {
		return nil, false
	}
	return o.LastColumnId, true
}

// HasLastColumnId returns a boolean if a field has been set.
func (o *AddSchemaUpdate) HasLastColumnId() bool {
	if o != nil && !IsNil(o.LastColumnId) {
		return true
	}

	return false
}

// SetLastColumnId gets a reference to the given int32 and assigns it to the LastColumnId field.
// Deprecated
func (o *AddSchemaUpdate) SetLastColumnId(v int32) {
	o.LastColumnId = &v
}

func (o AddSchemaUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddSchemaUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseUpdate, errBaseUpdate := json.Marshal(o.BaseUpdate)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	errBaseUpdate = json.Unmarshal([]byte(serializedBaseUpdate), &toSerialize)
	if errBaseUpdate != nil {
		return map[string]interface{}{}, errBaseUpdate
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	toSerialize["schema"] = o.Schema
	if !IsNil(o.LastColumnId) {
		toSerialize["last-column-id"] = o.LastColumnId
	}
	return toSerialize, nil
}

func (o *AddSchemaUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddSchemaUpdate := _AddSchemaUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddSchemaUpdate)

	if err != nil {
		return err
	}

	*o = AddSchemaUpdate(varAddSchemaUpdate)

	return err
}

type NullableAddSchemaUpdate struct {
	value *AddSchemaUpdate
	isSet bool
}

func (v NullableAddSchemaUpdate) Get() *AddSchemaUpdate {
	return v.value
}

func (v *NullableAddSchemaUpdate) Set(val *AddSchemaUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSchemaUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSchemaUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSchemaUpdate(val *AddSchemaUpdate) *NullableAddSchemaUpdate {
	return &NullableAddSchemaUpdate{value: val, isSet: true}
}

func (v NullableAddSchemaUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSchemaUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


