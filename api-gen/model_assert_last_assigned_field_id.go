/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssertLastAssignedFieldId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertLastAssignedFieldId{}

// AssertLastAssignedFieldId The table's last assigned column id must match the requirement's `last-assigned-field-id`
type AssertLastAssignedFieldId struct {
	TableRequirement
	Type *string `json:"type,omitempty"`
	LastAssignedFieldId int32 `json:"last-assigned-field-id"`
}

type _AssertLastAssignedFieldId AssertLastAssignedFieldId

// NewAssertLastAssignedFieldId instantiates a new AssertLastAssignedFieldId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertLastAssignedFieldId(lastAssignedFieldId int32) *AssertLastAssignedFieldId {
	this := AssertLastAssignedFieldId{}
	return &this
}

// NewAssertLastAssignedFieldIdWithDefaults instantiates a new AssertLastAssignedFieldId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertLastAssignedFieldIdWithDefaults() *AssertLastAssignedFieldId {
	this := AssertLastAssignedFieldId{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssertLastAssignedFieldId) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertLastAssignedFieldId) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssertLastAssignedFieldId) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssertLastAssignedFieldId) SetType(v string) {
	o.Type = &v
}

// GetLastAssignedFieldId returns the LastAssignedFieldId field value
func (o *AssertLastAssignedFieldId) GetLastAssignedFieldId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LastAssignedFieldId
}

// GetLastAssignedFieldIdOk returns a tuple with the LastAssignedFieldId field value
// and a boolean to check if the value has been set.
func (o *AssertLastAssignedFieldId) GetLastAssignedFieldIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAssignedFieldId, true
}

// SetLastAssignedFieldId sets field value
func (o *AssertLastAssignedFieldId) SetLastAssignedFieldId(v int32) {
	o.LastAssignedFieldId = v
}

func (o AssertLastAssignedFieldId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertLastAssignedFieldId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTableRequirement, errTableRequirement := json.Marshal(o.TableRequirement)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	errTableRequirement = json.Unmarshal([]byte(serializedTableRequirement), &toSerialize)
	if errTableRequirement != nil {
		return map[string]interface{}{}, errTableRequirement
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["last-assigned-field-id"] = o.LastAssignedFieldId
	return toSerialize, nil
}

func (o *AssertLastAssignedFieldId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last-assigned-field-id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssertLastAssignedFieldId := _AssertLastAssignedFieldId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssertLastAssignedFieldId)

	if err != nil {
		return err
	}

	*o = AssertLastAssignedFieldId(varAssertLastAssignedFieldId)

	return err
}

type NullableAssertLastAssignedFieldId struct {
	value *AssertLastAssignedFieldId
	isSet bool
}

func (v NullableAssertLastAssignedFieldId) Get() *AssertLastAssignedFieldId {
	return v.value
}

func (v *NullableAssertLastAssignedFieldId) Set(val *AssertLastAssignedFieldId) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertLastAssignedFieldId) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertLastAssignedFieldId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertLastAssignedFieldId(val *AssertLastAssignedFieldId) *NullableAssertLastAssignedFieldId {
	return &NullableAssertLastAssignedFieldId{value: val, isSet: true}
}

func (v NullableAssertLastAssignedFieldId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertLastAssignedFieldId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


