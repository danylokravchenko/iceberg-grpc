/*
Apache Iceberg REST Catalog API

Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package icebergclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PrimitiveTypeValue - struct for PrimitiveTypeValue
type PrimitiveTypeValue struct {
	Bool *bool
	Float32 *float32
	Float64 *float64
	Int32 *int32
	Int64 *int64
	String *string
}

// boolAsPrimitiveTypeValue is a convenience function that returns bool wrapped in PrimitiveTypeValue
func BoolAsPrimitiveTypeValue(v *bool) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		Bool: v,
	}
}

// float32AsPrimitiveTypeValue is a convenience function that returns float32 wrapped in PrimitiveTypeValue
func Float32AsPrimitiveTypeValue(v *float32) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		Float32: v,
	}
}

// float64AsPrimitiveTypeValue is a convenience function that returns float64 wrapped in PrimitiveTypeValue
func Float64AsPrimitiveTypeValue(v *float64) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		Float64: v,
	}
}

// int32AsPrimitiveTypeValue is a convenience function that returns int32 wrapped in PrimitiveTypeValue
func Int32AsPrimitiveTypeValue(v *int32) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		Int32: v,
	}
}

// int64AsPrimitiveTypeValue is a convenience function that returns int64 wrapped in PrimitiveTypeValue
func Int64AsPrimitiveTypeValue(v *int64) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		Int64: v,
	}
}

// stringAsPrimitiveTypeValue is a convenience function that returns string wrapped in PrimitiveTypeValue
func StringAsPrimitiveTypeValue(v *string) PrimitiveTypeValue {
	return PrimitiveTypeValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PrimitiveTypeValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Float64
	err = newStrictDecoder(data).Decode(&dst.Float64)
	if err == nil {
		jsonFloat64, _ := json.Marshal(dst.Float64)
		if string(jsonFloat64) == "{}" { // empty struct
			dst.Float64 = nil
		} else {
			if err = validator.Validate(dst.Float64); err != nil {
				dst.Float64 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float64 = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into Int64
	err = newStrictDecoder(data).Decode(&dst.Int64)
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			if err = validator.Validate(dst.Int64); err != nil {
				dst.Int64 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int64 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.Float64 = nil
		dst.Int32 = nil
		dst.Int64 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PrimitiveTypeValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PrimitiveTypeValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PrimitiveTypeValue) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Float64 != nil {
		return json.Marshal(&src.Float64)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PrimitiveTypeValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Float64 != nil {
		return obj.Float64
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.Int64 != nil {
		return obj.Int64
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PrimitiveTypeValue) GetActualInstanceValue() (interface{}) {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.Float64 != nil {
		return *obj.Float64
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.Int64 != nil {
		return *obj.Int64
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePrimitiveTypeValue struct {
	value *PrimitiveTypeValue
	isSet bool
}

func (v NullablePrimitiveTypeValue) Get() *PrimitiveTypeValue {
	return v.value
}

func (v *NullablePrimitiveTypeValue) Set(val *PrimitiveTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimitiveTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimitiveTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimitiveTypeValue(val *PrimitiveTypeValue) *NullablePrimitiveTypeValue {
	return &NullablePrimitiveTypeValue{value: val, isSet: true}
}

func (v NullablePrimitiveTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimitiveTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


