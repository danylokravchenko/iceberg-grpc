/*
Apache Iceberg REST Catalog API

Testing CatalogAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package icebergclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/danylokravchenko/iceberg-grpc/icebergclient"
)

func Test_icebergclient_CatalogAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogAPIAPIService CancelPlanning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string
		var planId string

		httpRes, err := apiClient.CatalogAPIAPI.CancelPlanning(context.Background(), prefix, namespace, table, planId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService CommitTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string

		httpRes, err := apiClient.CatalogAPIAPI.CommitTransaction(context.Background(), prefix).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService CreateNamespace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string

		resp, httpRes, err := apiClient.CatalogAPIAPI.CreateNamespace(context.Background(), prefix).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService CreateTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.CreateTable(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService CreateView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.CreateView(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService DropNamespace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		httpRes, err := apiClient.CatalogAPIAPI.DropNamespace(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService DropTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		httpRes, err := apiClient.CatalogAPIAPI.DropTable(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService DropView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var view string

		httpRes, err := apiClient.CatalogAPIAPI.DropView(context.Background(), prefix, namespace, view).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService FetchPlanningResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string
		var planId string

		resp, httpRes, err := apiClient.CatalogAPIAPI.FetchPlanningResult(context.Background(), prefix, namespace, table, planId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService FetchScanTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.FetchScanTasks(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ListNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ListNamespaces(context.Background(), prefix).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ListTables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ListTables(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ListViews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ListViews(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadCredentials(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadNamespaceMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadNamespaceMetadata(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadTable(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService LoadView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var view string

		resp, httpRes, err := apiClient.CatalogAPIAPI.LoadView(context.Background(), prefix, namespace, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService NamespaceExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		httpRes, err := apiClient.CatalogAPIAPI.NamespaceExists(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService PlanTableScan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.PlanTableScan(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService RegisterTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.RegisterTable(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService RenameTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string

		httpRes, err := apiClient.CatalogAPIAPI.RenameTable(context.Background(), prefix).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService RenameView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string

		httpRes, err := apiClient.CatalogAPIAPI.RenameView(context.Background(), prefix).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ReplaceView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var view string

		resp, httpRes, err := apiClient.CatalogAPIAPI.ReplaceView(context.Background(), prefix, namespace, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ReportMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		httpRes, err := apiClient.CatalogAPIAPI.ReportMetrics(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService TableExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		httpRes, err := apiClient.CatalogAPIAPI.TableExists(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService UpdateProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string

		resp, httpRes, err := apiClient.CatalogAPIAPI.UpdateProperties(context.Background(), prefix, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService UpdateTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var table string

		resp, httpRes, err := apiClient.CatalogAPIAPI.UpdateTable(context.Background(), prefix, namespace, table).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogAPIAPIService ViewExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prefix string
		var namespace string
		var view string

		httpRes, err := apiClient.CatalogAPIAPI.ViewExists(context.Background(), prefix, namespace, view).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
