version: '3'
services:
  grpc-server:
    build: .
    ports:
      - "50051:50051"
      - "2112:2112"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_ENDPOINT: minio:9000
      CATALOG_URL: http://lakekeeper:8181/iceberg
    depends_on:
      - minio
      - lakekeeper
    networks:
      iceberg_net:

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    networks:
      iceberg_net:

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set local http://minio:9000 minioadmin minioadmin &&
        mc mb --ignore-existing local/iceberg-data
      "
    networks:
      iceberg_net:

  lakekeeper:
    image: &lakekeeper-image ${LAKEKEEPER__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    container_name: lakekeeper
    pull_policy: &lakekeeper-pull-policy always
    ports:
      - "8181:8181"
    environment: &lakekeeper-environment
      LAKEKEEPER__PG_ENCRYPTION_KEY: This-is-NOT-Secure!
      LAKEKEEPER__PG_DATABASE_URL_READ: postgresql://postgres:postgres@db:5432/postgres
      LAKEKEEPER__PG_DATABASE_URL_WRITE: postgresql://postgres:postgres@db:5432/postgres
      CATALOG__WAREHOUSE: s3://iceberg-data
      CATALOG__OBJECT_STORE__TYPE: s3
      CATALOG__OBJECT_STORE__S3__ENDPOINT: http://minio:9000
      CATALOG__OBJECT_STORE__S3__ACCESS_KEY_ID: minioadmin
      CATALOG__OBJECT_STORE__S3__SECRET_ACCESS_KEY: minioadmin
      CATALOG__OBJECT_STORE__S3__PATH_STYLE_ACCESS: "true"
      CATALOG__OBJECT_STORE__S3__REGION: us-east-1
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/iceberg-catalog", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      iceberg_net:

  migrate:
    image: *lakekeeper-image
    pull_policy: *lakekeeper-pull-policy
    environment: *lakekeeper-environment
    restart: "no"
    command: [ "migrate" ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      iceberg_net:

  db:
    image: bitnami/postgresql:16.6.0
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    volumes:
      - volume-lakekeeper:/bitnami/postgresql
    networks:
      iceberg_net:

networks:
  iceberg_net:

volumes:
  volume-lakekeeper: